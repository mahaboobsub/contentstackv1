{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"launch.yaml":{"content":"# Contentstack Launch Configuration\n# This file configures the deployment of ContentIQ to Contentstack Launch\n\nproject_id: ${CONTENTSTACK_LAUNCH_PROJECT_ID}\nname: ContentIQ Chat Platform\ndescription: AI-powered chat platform with MCP integration for content management\n\n# Build Configuration\nbuild:\n  framework: vite\n  build_command: npm run build\n  output_directory: dist/public\n  install_command: npm install\n  \n  # Environment Variables for Build\n  environment:\n    NODE_ENV: production\n    VITE_API_URL: ${API_URL}\n    VITE_CONTENTSTACK_API_KEY: ${CONTENTSTACK_API_KEY}\n    VITE_CONTENTSTACK_DELIVERY_TOKEN: ${CONTENTSTACK_DELIVERY_TOKEN}\n\n# Runtime Configuration\nruntime:\n  node_version: \"18\"\n  \n  # Environment Variables for Runtime\n  environment:\n    # Server Configuration\n    PORT: 5000\n    HOST: 0.0.0.0\n    NODE_ENV: production\n    \n    # API Configuration\n    API_URL: https://api.contentiq.app\n    \n    # Contentstack Configuration\n    CONTENTSTACK_API_KEY: ${CONTENTSTACK_API_KEY}\n    CONTENTSTACK_DELIVERY_TOKEN: ${CONTENTSTACK_DELIVERY_TOKEN}\n    CONTENTSTACK_MANAGEMENT_TOKEN: ${CONTENTSTACK_MANAGEMENT_TOKEN}\n    CONTENTSTACK_ENVIRONMENT: production\n    CONTENTSTACK_LAUNCH_PROJECT_ID: ${CONTENTSTACK_LAUNCH_PROJECT_ID}\n    \n    # LLM Configuration\n    GROQ_API_KEY: ${GROQ_API_KEY}\n    OPENAI_API_KEY: ${OPENAI_API_KEY}\n    \n    # Redis Configuration (if using external Redis)\n    REDIS_URL: ${REDIS_URL}\n    \n    # Security\n    SESSION_SECRET: ${SESSION_SECRET}\n    \n    # CORS Configuration\n    ALLOWED_ORIGINS: https://contentiq.app,https://www.contentiq.app\n\n# Routing and Redirects\nroutes:\n  # Main application routes\n  - source: /\n    destination: /index.html\n    \n  - source: /dashboard\n    destination: /index.html\n    \n  # API routes (if backend is deployed separately)\n  - source: /api/*\n    destination: ${API_URL}/api/:splat\n    \n  # Widget distribution\n  - source: /widget.js\n    destination: /public/widget.js\n    headers:\n      Cache-Control: public, max-age=3600\n      Content-Type: application/javascript\n      Access-Control-Allow-Origin: \"*\"\n      Access-Control-Allow-Methods: GET, OPTIONS\n      Access-Control-Allow-Headers: Content-Type\n  \n  # Static assets\n  - source: /assets/*\n    destination: /assets/:splat\n    headers:\n      Cache-Control: public, max-age=31536000\n\n# Headers Configuration\nheaders:\n  # Security Headers\n  - source: /*\n    headers:\n      X-Frame-Options: DENY\n      X-Content-Type-Options: nosniff\n      X-XSS-Protection: 1; mode=block\n      Referrer-Policy: strict-origin-when-cross-origin\n      Permissions-Policy: camera=(), microphone=(), geolocation=()\n      \n  # CORS for API endpoints\n  - source: /api/*\n    headers:\n      Access-Control-Allow-Origin: https://contentiq.app\n      Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS\n      Access-Control-Allow-Headers: Content-Type, Authorization\n      Access-Control-Allow-Credentials: true\n\n# Custom Domain Configuration\ndomains:\n  - contentiq.app\n  - www.contentiq.app\n\n# SSL Configuration\nssl:\n  certificate_type: lets_encrypt\n  force_https: true\n\n# Functions Configuration (for API endpoints if using serverless)\nfunctions:\n  api:\n    runtime: nodejs18\n    memory: 512\n    timeout: 30\n    environment:\n      CONTENTSTACK_API_KEY: ${CONTENTSTACK_API_KEY}\n      CONTENTSTACK_DELIVERY_TOKEN: ${CONTENTSTACK_DELIVERY_TOKEN}\n      CONTENTSTACK_MANAGEMENT_TOKEN: ${CONTENTSTACK_MANAGEMENT_TOKEN}\n      GROQ_API_KEY: ${GROQ_API_KEY}\n      OPENAI_API_KEY: ${OPENAI_API_KEY}\n      REDIS_URL: ${REDIS_URL}\n\n# Edge Configuration\nedge:\n  # Enable edge caching for static assets\n  cache:\n    - source: /assets/*\n      ttl: 86400 # 24 hours\n      \n    - source: /widget.js\n      ttl: 3600 # 1 hour\n      \n    - source: /_app/*\n      ttl: 86400 # 24 hours\n\n# Analytics and Monitoring\nanalytics:\n  providers:\n    - contentstack_insights\n    \nmonitoring:\n  health_check:\n    path: /api/health\n    interval: 300 # 5 minutes\n    \n  alerts:\n    - type: response_time\n      threshold: 5000 # 5 seconds\n      \n    - type: error_rate\n      threshold: 5 # 5%\n      \n    - type: uptime\n      threshold: 99 # 99%\n\n# Deployment Settings\ndeployment:\n  auto_deploy: true\n  branch: main\n  \n  # Preview deployments\n  preview:\n    enabled: true\n    branches:\n      - develop\n      - feature/*\n      \n  # Build optimizations\n  optimizations:\n    minify: true\n    compress: true\n    tree_shaking: true\n    \n  # Node.js optimizations\n  node:\n    version: \"18\"\n    package_manager: npm\n    \n# Integration Settings\nintegrations:\n  # Contentstack CMS Integration\n  contentstack:\n    stack_api_key: ${CONTENTSTACK_API_KEY}\n    delivery_token: ${CONTENTSTACK_DELIVERY_TOKEN}\n    environment: production\n    \n  # Third-party Services\n  services:\n    - name: groq\n      enabled: true\n      \n    - name: openai\n      enabled: true\n      \n    - name: redis\n      enabled: true\n\n# Development Settings (for preview deployments)\ndevelopment:\n  environment:\n    CONTENTSTACK_ENVIRONMENT: development\n    NODE_ENV: development\n    DEBUG: true\n    \n  # Hot reload for preview deployments\n  hot_reload: true\n  \n  # Development-specific routes\n  routes:\n    - source: /dev/*\n      destination: /dev/:splat\n","size_bytes":5189},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ContentIQ Chat Platform\n\n## Overview\n\nContentIQ is a full-stack AI chat assistant platform designed for content management systems, particularly Contentstack. The application provides an embeddable chat widget with real-time analytics, multi-provider LLM support, and content gap analysis. Built as a monorepo with TypeScript, the platform combines a React frontend with an Express.js backend and integrates with external services through MCP (Model Context Protocol) for content operations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript running on Vite for development\n- **UI Components**: Radix UI primitives with shadcn/ui component system\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack React Query for server state, React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Real-time Communication**: EventSource for server-sent events, WebSocket support for chat functionality\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Pattern**: RESTful endpoints with WebSocket support for real-time features\n- **Session Management**: In-memory storage with planned database integration\n- **Development**: Hot module replacement through Vite integration\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema**: Comprehensive schema for users, chat sessions, messages, content gaps, and analytics\n- **Connection**: Neon Database serverless PostgreSQL\n- **Caching**: Redis for query caching and session storage (planned Python services)\n- **Session Storage**: Browser localStorage for chat history persistence\n\n### Authentication and Authorization\n- **User Management**: Basic user system with username/password authentication\n- **Session Handling**: Session-based authentication with unique session identifiers\n- **Access Control**: Role-based permissions for admin functions (analytics, content approval)\n\n### External Service Integrations\n\n#### Content Management (MCP Integration)\n- **Contentstack Integration**: Direct integration through MCP (Model Context Protocol)\n- **Content Operations**: Fetch content, search across content types, create draft content\n- **Environment Support**: Configurable environments (development, production)\n- **Token Management**: Separate delivery and management tokens for different operations\n\n#### AI/LLM Services\n- **Multi-Provider Support**: Groq as primary provider, OpenAI as fallback\n- **Streaming Responses**: Real-time response streaming for better user experience\n- **Content-Aware Responses**: Context injection from CMS content for relevant answers\n- **Analytics Integration**: Response time tracking and success rate monitoring\n\n#### Analytics and Monitoring\n- **Real-time Analytics**: Query tracking, response time monitoring, success rate analysis\n- **Content Gap Detection**: Automatic identification of missing content based on user queries\n- **Trend Analysis**: Query pattern analysis and content performance metrics\n- **Export Capabilities**: Analytics data export functionality\n\n### Deployment and Infrastructure\n- **Containerization**: Docker support with multi-stage builds\n- **Environment Configuration**: Comprehensive environment variable management\n- **Development Tools**: Hot reloading, error overlays, and development banners\n- **Build Process**: Vite for frontend bundling, esbuild for backend compilation\n- **Static Assets**: Separate handling of static assets and public files\n\n### Widget SDK\n- **Embeddable Widget**: Standalone JavaScript SDK for website integration\n- **Configuration Options**: Customizable themes, positioning, and behavior\n- **Cross-Origin Support**: CORS configuration for multi-domain deployment\n- **Event System**: Custom event handling for widget interactions\n\nThe architecture emphasizes modularity, type safety, and real-time capabilities while maintaining clear separation between frontend presentation, backend logic, and external service integrations.","size_bytes":4189},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      backgroundImage: {\n        'gradient-primary': 'linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--secondary)) 100%)',\n        'gradient-muted': 'linear-gradient(to bottom, hsl(var(--muted))/30, hsl(var(--background)))',\n        'gradient-card': 'linear-gradient(to bottom right, hsl(var(--muted)), hsl(var(--background)))',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"slide-up\": {\n          \"0%\": {\n            transform: \"translateY(100%)\",\n            opacity: \"0\",\n          },\n          \"100%\": {\n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n        \"pulse-ring\": {\n          \"0%\": {\n            transform: \"scale(1)\",\n            opacity: \"1\",\n          },\n          \"100%\": {\n            transform: \"scale(1.2)\",\n            opacity: \"0\",\n          },\n        },\n        \"typing\": {\n          \"0%, 60%, 100%\": {\n            opacity: \"0.3\",\n          },\n          \"30%\": {\n            opacity: \"1\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-out\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n        \"pulse-ring\": \"pulse-ring 2s infinite\",\n        \"typing\": \"typing 1.5s infinite\",\n      },\n      spacing: {\n        '18': '4.5rem',\n        '88': '22rem',\n        '128': '32rem',\n      },\n      boxShadow: {\n        'soft': '0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04)',\n        'glow': '0 0 20px rgba(59, 130, 246, 0.3)',\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n    function({ addUtilities }: { addUtilities: any }) {\n      const newUtilities = {\n        '.line-clamp-1': {\n          display: '-webkit-box',\n          '-webkit-line-clamp': '1',\n          '-webkit-box-orient': 'vertical',\n          overflow: 'hidden',\n        },\n        '.line-clamp-2': {\n          display: '-webkit-box',\n          '-webkit-line-clamp': '2',\n          '-webkit-box-orient': 'vertical',\n          overflow: 'hidden',\n        },\n        '.line-clamp-3': {\n          display: '-webkit-box',\n          '-webkit-line-clamp': '3',\n          '-webkit-box-orient': 'vertical',\n          overflow: 'hidden',\n        },\n        '.gradient-bg': {\n          background: 'linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--secondary)) 100%)',\n        },\n        '.glass-bg': {\n          background: 'rgba(255, 255, 255, 0.1)',\n          'backdrop-filter': 'blur(10px)',\n          border: '1px solid rgba(255, 255, 255, 0.2)',\n        },\n      };\n      addUtilities(newUtilities);\n    },\n  ],\n} satisfies Config;\n","size_bytes":5416},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"public/widget.js":{"content":"/**\n * ContentIQ Widget Loader\n * This script loads and initializes the ContentIQ chat widget\n */\n\n(function() {\n  'use strict';\n\n  // Configuration defaults\n  const defaultConfig = {\n    apiUrl: 'https://api.contentiq.io',\n    theme: 'auto',\n    position: 'bottom-right',\n    primaryColor: '#3B82F6',\n    secondaryColor: '#8B5CF6',\n    accentColor: '#A855F7',\n    autoOpen: false,\n    enableVoice: true,\n    enableTTS: false,\n    welcomeMessage: 'Welcome to ContentIQ! How can I help you today?',\n    suggestions: [\n      'Show me available tours',\n      'What content is missing?',\n      'Analytics dashboard'\n    ]\n  };\n\n  // Global ContentIQ object\n  window.ContentIQ = window.ContentIQ || {};\n\n  /**\n   * Initialize the ContentIQ widget\n   * @param {Object} config - Configuration options\n   */\n  window.ContentIQ.init = function(config) {\n    const finalConfig = Object.assign({}, defaultConfig, config);\n    \n    // Validate required config\n    if (!finalConfig.apiKey) {\n      console.error('ContentIQ: API key is required');\n      return;\n    }\n\n    // Load the widget module\n    loadWidget(finalConfig);\n  };\n\n  /**\n   * Load the widget module dynamically\n   * @param {Object} config - Configuration options\n   */\n  function loadWidget(config) {\n    // Check if widget is already loaded\n    if (window.ContentIQWidget) {\n      window.ContentIQWidget.init(config);\n      return;\n    }\n\n    // Create script element for the main widget\n    const script = document.createElement('script');\n    script.src = config.widgetUrl || `${config.apiUrl}/static/contentiq-widget.js`;\n    script.async = true;\n    \n    script.onload = function() {\n      if (window.ContentIQWidget) {\n        window.ContentIQWidget.init(config);\n      } else {\n        console.error('ContentIQ: Failed to load widget module');\n      }\n    };\n\n    script.onerror = function() {\n      console.error('ContentIQ: Failed to load widget script');\n      // Fallback to embedded widget\n      loadEmbeddedWidget(config);\n    };\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Load embedded widget as fallback\n   * @param {Object} config - Configuration options\n   */\n  function loadEmbeddedWidget(config) {\n    // Create the embedded widget\n    const widget = new EmbeddedWidget(config);\n    widget.init();\n    \n    // Expose widget instance\n    window.ContentIQWidget = widget;\n  }\n\n  /**\n   * Embedded Widget Class\n   * Fallback implementation when external script fails to load\n   */\n  class EmbeddedWidget {\n    constructor(config) {\n      this.config = config;\n      this.isOpen = false;\n      this.messages = [];\n      this.sessionId = `embedded_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    init() {\n      this.injectStyles();\n      this.createWidget();\n      this.bindEvents();\n    }\n\n    injectStyles() {\n      if (document.getElementById('contentiq-embedded-styles')) return;\n\n      const style = document.createElement('style');\n      style.id = 'contentiq-embedded-styles';\n      style.textContent = `\n        .contentiq-embedded {\n          position: fixed;\n          z-index: 10000;\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n          ${this.config.position.includes('right') ? 'right: 24px;' : 'left: 24px;'}\n          ${this.config.position.includes('bottom') ? 'bottom: 24px;' : 'top: 24px;'}\n        }\n\n        .contentiq-fab {\n          width: 60px;\n          height: 60px;\n          border-radius: 50%;\n          border: none;\n          cursor: pointer;\n          box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);\n          transition: all 0.3s ease;\n          background: linear-gradient(135deg, ${this.config.primaryColor}, ${this.config.secondaryColor});\n          color: white;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 24px;\n          position: relative;\n        }\n\n        .contentiq-fab:hover {\n          transform: scale(1.1);\n          box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);\n        }\n\n        .contentiq-badge {\n          position: absolute;\n          top: -8px;\n          right: -8px;\n          background: #ef4444;\n          color: white;\n          border-radius: 50%;\n          width: 24px;\n          height: 24px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 12px;\n          font-weight: bold;\n        }\n\n        .contentiq-chat {\n          position: absolute;\n          ${this.config.position.includes('right') ? 'right: 0;' : 'left: 0;'}\n          ${this.config.position.includes('bottom') ? 'bottom: 80px;' : 'top: 80px;'}\n          width: 380px;\n          height: 600px;\n          background: white;\n          border-radius: 16px;\n          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n          display: none;\n          flex-direction: column;\n          overflow: hidden;\n          animation: slideIn 0.3s ease;\n        }\n\n        .contentiq-chat.open {\n          display: flex;\n        }\n\n        @keyframes slideIn {\n          from {\n            opacity: 0;\n            transform: translateY(20px) scale(0.95);\n          }\n          to {\n            opacity: 1;\n            transform: translateY(0) scale(1);\n          }\n        }\n\n        .contentiq-header {\n          background: linear-gradient(135deg, ${this.config.primaryColor}, ${this.config.secondaryColor});\n          color: white;\n          padding: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n        }\n\n        .contentiq-messages {\n          flex: 1;\n          overflow-y: auto;\n          padding: 16px;\n          background: linear-gradient(to bottom, #f8fafc, white);\n        }\n\n        .contentiq-input-area {\n          padding: 16px;\n          border-top: 1px solid #e5e7eb;\n        }\n\n        .contentiq-input-form {\n          display: flex;\n          gap: 8px;\n        }\n\n        .contentiq-input {\n          flex: 1;\n          padding: 12px 16px;\n          border: 1px solid #e5e7eb;\n          border-radius: 24px;\n          font-size: 14px;\n          outline: none;\n        }\n\n        .contentiq-send {\n          width: 40px;\n          height: 40px;\n          border-radius: 50%;\n          border: none;\n          background: linear-gradient(135deg, ${this.config.primaryColor}, ${this.config.secondaryColor});\n          color: white;\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .contentiq-message {\n          display: flex;\n          gap: 12px;\n          margin-bottom: 16px;\n        }\n\n        .contentiq-message.user {\n          flex-direction: row-reverse;\n        }\n\n        .contentiq-message-bubble {\n          max-width: 70%;\n          padding: 12px 16px;\n          border-radius: 16px;\n          font-size: 14px;\n          line-height: 1.4;\n        }\n\n        .contentiq-message.user .contentiq-message-bubble {\n          background: ${this.config.primaryColor};\n          color: white;\n        }\n\n        .contentiq-message.assistant .contentiq-message-bubble {\n          background: #f3f4f6;\n          color: #111827;\n        }\n      `;\n\n      document.head.appendChild(style);\n    }\n\n    createWidget() {\n      this.container = document.createElement('div');\n      this.container.className = 'contentiq-embedded';\n      this.container.innerHTML = `\n        <button class=\"contentiq-fab\">\n          💬\n          <div class=\"contentiq-badge\" style=\"display: none;\">0</div>\n        </button>\n        <div class=\"contentiq-chat\">\n          <div class=\"contentiq-header\">\n            <div>\n              <h3 style=\"margin: 0; font-size: 16px;\">ContentIQ Assistant</h3>\n              <p style=\"margin: 0; font-size: 12px; opacity: 0.9;\">Powered by Contentstack MCP</p>\n            </div>\n            <button class=\"contentiq-close\" style=\"background: none; border: none; color: white; cursor: pointer; font-size: 20px;\">×</button>\n          </div>\n          <div class=\"contentiq-messages\">\n            <div class=\"contentiq-welcome\" style=\"text-align: center; padding: 32px 16px;\">\n              <div style=\"font-size: 48px; margin-bottom: 16px;\">🤖</div>\n              <h4 style=\"margin: 0 0 8px; font-size: 18px;\">${this.config.welcomeMessage}</h4>\n              <p style=\"margin: 0; color: #6b7280; font-size: 14px;\">Ask me anything about your content.</p>\n            </div>\n          </div>\n          <div class=\"contentiq-input-area\">\n            <form class=\"contentiq-input-form\">\n              <input type=\"text\" class=\"contentiq-input\" placeholder=\"Type your message...\" />\n              <button type=\"submit\" class=\"contentiq-send\">→</button>\n            </form>\n          </div>\n        </div>\n      `;\n\n      document.body.appendChild(this.container);\n\n      // Auto-open if configured\n      if (this.config.autoOpen) {\n        setTimeout(() => this.open(), 1000);\n      }\n    }\n\n    bindEvents() {\n      const fab = this.container.querySelector('.contentiq-fab');\n      const chat = this.container.querySelector('.contentiq-chat');\n      const close = this.container.querySelector('.contentiq-close');\n      const form = this.container.querySelector('.contentiq-input-form');\n      const input = this.container.querySelector('.contentiq-input');\n\n      fab.addEventListener('click', () => this.toggle());\n      close.addEventListener('click', () => this.close());\n      \n      form.addEventListener('submit', (e) => {\n        e.preventDefault();\n        const message = input.value.trim();\n        if (message) {\n          this.sendMessage(message);\n          input.value = '';\n        }\n      });\n    }\n\n    open() {\n      this.isOpen = true;\n      this.container.querySelector('.contentiq-chat').classList.add('open');\n    }\n\n    close() {\n      this.isOpen = false;\n      this.container.querySelector('.contentiq-chat').classList.remove('open');\n    }\n\n    toggle() {\n      if (this.isOpen) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n\n    async sendMessage(message) {\n      this.addMessage('user', message);\n      this.showTyping();\n\n      try {\n        const response = await fetch(`${this.config.apiUrl}/api/chat`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${this.config.apiKey}`\n          },\n          body: JSON.stringify({\n            message,\n            session_id: this.sessionId\n          })\n        });\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        const data = await response.json();\n        this.hideTyping();\n        this.addMessage('assistant', data.response || 'Sorry, I couldn\\'t understand that.');\n\n      } catch (error) {\n        console.error('ContentIQ: Error sending message', error);\n        this.hideTyping();\n        this.addMessage('assistant', 'Sorry, I\\'m having trouble connecting. Please try again.');\n      }\n    }\n\n    addMessage(role, content) {\n      const messagesContainer = this.container.querySelector('.contentiq-messages');\n      \n      // Remove welcome message if present\n      const welcome = messagesContainer.querySelector('.contentiq-welcome');\n      if (welcome) {\n        welcome.remove();\n      }\n\n      const messageEl = document.createElement('div');\n      messageEl.className = `contentiq-message ${role}`;\n      messageEl.innerHTML = `\n        <div class=\"contentiq-message-bubble\">${content}</div>\n      `;\n\n      messagesContainer.appendChild(messageEl);\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n\n      this.messages.push({ role, content, timestamp: Date.now() });\n      this.updateBadge();\n    }\n\n    showTyping() {\n      const messagesContainer = this.container.querySelector('.contentiq-messages');\n      const typingEl = document.createElement('div');\n      typingEl.className = 'contentiq-typing';\n      typingEl.innerHTML = '<div class=\"contentiq-message-bubble\">Typing...</div>';\n      messagesContainer.appendChild(typingEl);\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n\n    hideTyping() {\n      const typing = this.container.querySelector('.contentiq-typing');\n      if (typing) {\n        typing.remove();\n      }\n    }\n\n    updateBadge() {\n      const badge = this.container.querySelector('.contentiq-badge');\n      const userMessages = this.messages.filter(m => m.role === 'user').length;\n      \n      if (userMessages > 0 && !this.isOpen) {\n        badge.textContent = userMessages;\n        badge.style.display = 'flex';\n      } else {\n        badge.style.display = 'none';\n      }\n    }\n  }\n\n  // Auto-initialize if global config is present\n  if (window.ContentIQConfig) {\n    window.ContentIQ.init(window.ContentIQConfig);\n  }\n\n  // Expose public API\n  window.ContentIQ.open = function() {\n    if (window.ContentIQWidget) {\n      window.ContentIQWidget.open();\n    }\n  };\n\n  window.ContentIQ.close = function() {\n    if (window.ContentIQWidget) {\n      window.ContentIQWidget.close();\n    }\n  };\n\n  window.ContentIQ.sendMessage = function(message) {\n    if (window.ContentIQWidget) {\n      window.ContentIQWidget.sendMessage(message);\n    }\n  };\n\n})();\n","size_bytes":13240},"server/config.py":{"content":"import os\nfrom typing import Dict, Any\n\nclass Config:\n    \"\"\"Application configuration\"\"\"\n    \n    # MCP Configuration\n    MCP_COMMAND = \"npx\"\n    MCP_ARGS = [\"-y\", \"@contentstack/mcp\"]\n    \n    # Contentstack Configuration\n    CONTENTSTACK_API_KEY = os.getenv(\"CONTENTSTACK_API_KEY\")\n    CONTENTSTACK_DELIVERY_TOKEN = os.getenv(\"CONTENTSTACK_DELIVERY_TOKEN\")\n    CONTENTSTACK_MANAGEMENT_TOKEN = os.getenv(\"CONTENTSTACK_MANAGEMENT_TOKEN\")\n    CONTENTSTACK_ENVIRONMENT = os.getenv(\"CONTENTSTACK_ENVIRONMENT\", \"development\")\n    CONTENTSTACK_LAUNCH_PROJECT_ID = os.getenv(\"CONTENTSTACK_LAUNCH_PROJECT_ID\")\n    \n    # LLM Configuration\n    GROQ_API_KEY = os.getenv(\"GROQ_API_KEY\")\n    OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n    \n    # Redis Configuration\n    REDIS_URL = os.getenv(\"REDIS_URL\", \"redis://localhost:6379\")\n    \n    # Application Configuration\n    DEBUG = os.getenv(\"DEBUG\", \"false\").lower() == \"true\"\n    PORT = int(os.getenv(\"PORT\", \"8000\"))\n    HOST = os.getenv(\"HOST\", \"0.0.0.0\")\n    \n    # CORS Configuration\n    ALLOWED_ORIGINS = os.getenv(\"ALLOWED_ORIGINS\", \"*\").split(\",\")\n    \n    @classmethod\n    def validate(cls) -> Dict[str, Any]:\n        \"\"\"Validate configuration and return status\"\"\"\n        \n        issues = []\n        warnings = []\n        \n        # Check required Contentstack config\n        if not cls.CONTENTSTACK_API_KEY:\n            issues.append(\"CONTENTSTACK_API_KEY is required\")\n        \n        if not cls.CONTENTSTACK_DELIVERY_TOKEN:\n            issues.append(\"CONTENTSTACK_DELIVERY_TOKEN is required\")\n        \n        # Check LLM config (at least one required)\n        if not cls.GROQ_API_KEY and not cls.OPENAI_API_KEY:\n            issues.append(\"Either GROQ_API_KEY or OPENAI_API_KEY is required\")\n        \n        # Warnings for optional config\n        if not cls.CONTENTSTACK_MANAGEMENT_TOKEN:\n            warnings.append(\"CONTENTSTACK_MANAGEMENT_TOKEN not set - draft creation disabled\")\n        \n        if not cls.CONTENTSTACK_LAUNCH_PROJECT_ID:\n            warnings.append(\"CONTENTSTACK_LAUNCH_PROJECT_ID not set - deployment features disabled\")\n        \n        return {\n            \"valid\": len(issues) == 0,\n            \"issues\": issues,\n            \"warnings\": warnings\n        }\n\nconfig = Config()\n","size_bytes":2259},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport { insertChatMessageSchema } from \"@shared/schema\";\n\n// Mock imports for Python services (in real implementation, these would be proper HTTP calls)\ninterface MCPClient {\n  fetch_content(content_type: string, query?: string): Promise<any[]>;\n  search_content(query: string, content_types?: string[]): Promise<any[]>;\n  create_draft_content(content_type: string, title: string, data: any): Promise<any>;\n}\n\ninterface LLMService {\n  generate_response(messages: any[], content_context?: any[], stream?: boolean): AsyncGenerator<any>;\n  analyze_content_gap(query: string, available_content: any[]): Promise<any>;\n}\n\ninterface AnalyticsService {\n  track_query(session_id: string, query: string, response_time_ms: number, success: boolean): Promise<void>;\n  track_content_gap(query: string, gap_data: any): Promise<void>;\n  get_analytics_summary(): Promise<any>;\n  get_query_trends(days?: number): Promise<any[]>;\n  get_top_queries(limit?: number): Promise<any[]>;\n  get_content_gaps(): Promise<any[]>;\n}\n\n// Mock service instances (in real implementation, these would call Python FastAPI endpoints)\nconst mockMCPClient: MCPClient = {\n  async fetch_content(content_type: string, query?: string) {\n    // This would call the Python FastAPI endpoint\n    return [];\n  },\n  async search_content(query: string, content_types?: string[]) {\n    // This would call the Python FastAPI endpoint\n    return [];\n  },\n  async create_draft_content(content_type: string, title: string, data: any) {\n    // This would call the Python FastAPI endpoint\n    return null;\n  }\n};\n\nconst mockLLMService: LLMService = {\n  async* generate_response(messages: any[], content_context?: any[], stream = false) {\n    // This would call the Python FastAPI endpoint\n    yield { chunk: \"Mock response\", done: true, response_time_ms: 500 };\n  },\n  async analyze_content_gap(query: string, available_content: any[]) {\n    // This would call the Python FastAPI endpoint\n    return { is_gap: false, priority: \"low\", suggested_content_type: \"article\" };\n  }\n};\n\nconst mockAnalyticsService: AnalyticsService = {\n  async track_query(session_id: string, query: string, response_time_ms: number, success: boolean) {\n    // This would call the Python FastAPI endpoint\n  },\n  async track_content_gap(query: string, gap_data: any) {\n    // This would call the Python FastAPI endpoint\n  },\n  async get_analytics_summary() {\n    // This would call the Python FastAPI endpoint\n    return {\n      total_queries: 1247,\n      average_response_time_ms: 847,\n      success_rate: 94.2,\n      content_gaps_count: 23\n    };\n  },\n  async get_query_trends(days = 7) {\n    // This would call the Python FastAPI endpoint\n    return [];\n  },\n  async get_top_queries(limit = 10) {\n    // This would call the Python FastAPI endpoint\n    return [];\n  },\n  async get_content_gaps() {\n    // This would call the Python FastAPI endpoint\n    return [];\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time analytics\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  const analyticsClients = new Set<WebSocket>();\n\n  wss.on('connection', (ws: WebSocket) => {\n    analyticsClients.add(ws);\n    \n    ws.on('close', () => {\n      analyticsClients.delete(ws);\n    });\n  });\n\n  // Broadcast analytics updates\n  const broadcastAnalytics = async () => {\n    if (analyticsClients.size > 0) {\n      try {\n        const analytics = await mockAnalyticsService.get_analytics_summary();\n        const message = JSON.stringify({ type: 'analytics_update', data: analytics });\n        \n        analyticsClients.forEach((client) => {\n          if (client.readyState === WebSocket.OPEN) {\n            client.send(message);\n          }\n        });\n      } catch (error) {\n        console.error('Error broadcasting analytics:', error);\n      }\n    }\n  };\n\n  // Broadcast analytics every 5 seconds\n  setInterval(broadcastAnalytics, 5000);\n\n  // Chat endpoint with streaming support\n  app.get('/api/chat', async (req, res) => {\n    try {\n      const { message, session_id, stream = 'false' } = req.query as {\n        message: string;\n        session_id: string;\n        stream: string;\n      };\n\n      if (!message || !session_id) {\n        return res.status(400).json({ error: 'Message and session_id are required' });\n      }\n\n      const isStreaming = stream === 'true';\n      const startTime = Date.now();\n\n      // Search for relevant content\n      const contentResults = await mockMCPClient.search_content(message, ['tours', 'hotels', 'guides']);\n      \n      // Get conversation history\n      const messages = [\n        { role: 'user', content: message }\n      ];\n\n      if (isStreaming) {\n        // Set up Server-Sent Events\n        res.writeHead(200, {\n          'Content-Type': 'text/event-stream',\n          'Cache-Control': 'no-cache',\n          'Connection': 'keep-alive',\n          'Access-Control-Allow-Origin': '*',\n        });\n\n        let fullResponse = '';\n        let responseTime = 0;\n\n        try {\n          for await (const chunk of mockLLMService.generate_response(messages, contentResults, true)) {\n            if (chunk.chunk) {\n              fullResponse += chunk.chunk;\n            }\n            \n            if (chunk.done) {\n              responseTime = chunk.response_time_ms || (Date.now() - startTime);\n            }\n\n            res.write(`data: ${JSON.stringify(chunk)}\\n\\n`);\n\n            if (chunk.done) {\n              break;\n            }\n          }\n\n          // Save message to storage\n          await storage.createMessage({\n            sessionId: session_id,\n            role: 'user',\n            content: message,\n            metadata: { response_time_ms: responseTime }\n          });\n\n          await storage.createMessage({\n            sessionId: session_id,\n            role: 'assistant',\n            content: fullResponse,\n            metadata: { \n              response_time_ms: responseTime,\n              content_references: contentResults.length > 0 ? contentResults : undefined\n            }\n          });\n\n          // Track analytics\n          await mockAnalyticsService.track_query(session_id, message, responseTime, true);\n\n          // Check for content gaps\n          if (contentResults.length === 0) {\n            const gapAnalysis = await mockLLMService.analyze_content_gap(message, contentResults);\n            if (gapAnalysis.is_gap) {\n              await mockAnalyticsService.track_content_gap(message, gapAnalysis);\n              \n              res.write(`data: ${JSON.stringify({\n                notification: 'Content gap detected',\n                gap_data: gapAnalysis\n              })}\\n\\n`);\n            }\n          }\n\n        } catch (error) {\n          console.error('Streaming error:', error);\n          res.write(`data: ${JSON.stringify({\n            error: 'An error occurred during response generation'\n          })}\\n\\n`);\n        }\n\n        res.end();\n      } else {\n        // Non-streaming response\n        const chunks: any[] = [];\n        \n        for await (const chunk of mockLLMService.generate_response(messages, contentResults, false)) {\n          chunks.push(chunk);\n        }\n\n        const response = chunks[chunks.length - 1];\n        const responseTime = response.response_time_ms || (Date.now() - startTime);\n\n        // Save messages and track analytics (same as streaming)\n        await storage.createMessage({\n          sessionId: session_id,\n          role: 'user',\n          content: message,\n          metadata: { response_time_ms: responseTime }\n        });\n\n        await storage.createMessage({\n          sessionId: session_id,\n          role: 'assistant',\n          content: response.chunk,\n          metadata: { \n            response_time_ms: responseTime,\n            content_references: contentResults.length > 0 ? contentResults : undefined\n          }\n        });\n\n        await mockAnalyticsService.track_query(session_id, message, responseTime, true);\n\n        res.json({\n          response: response.chunk,\n          response_time_ms: responseTime,\n          content_references: contentResults,\n          session_id\n        });\n      }\n\n    } catch (error) {\n      console.error('Chat endpoint error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Analytics endpoints\n  app.get('/api/analytics', async (req, res) => {\n    try {\n      const analytics = await mockAnalyticsService.get_analytics_summary();\n      res.json(analytics);\n    } catch (error) {\n      console.error('Analytics error:', error);\n      res.status(500).json({ error: 'Failed to fetch analytics' });\n    }\n  });\n\n  app.get('/api/analytics/trends', async (req, res) => {\n    try {\n      const { days = '7' } = req.query;\n      const trends = await mockAnalyticsService.get_query_trends(parseInt(days as string));\n      res.json(trends);\n    } catch (error) {\n      console.error('Trends error:', error);\n      res.status(500).json({ error: 'Failed to fetch trends' });\n    }\n  });\n\n  app.get('/api/analytics/top-queries', async (req, res) => {\n    try {\n      const { limit = '10' } = req.query;\n      const topQueries = await mockAnalyticsService.get_top_queries(parseInt(limit as string));\n      res.json(topQueries);\n    } catch (error) {\n      console.error('Top queries error:', error);\n      res.status(500).json({ error: 'Failed to fetch top queries' });\n    }\n  });\n\n  app.get('/api/content-gaps', async (req, res) => {\n    try {\n      const contentGaps = await mockAnalyticsService.get_content_gaps();\n      res.json(contentGaps);\n    } catch (error) {\n      console.error('Content gaps error:', error);\n      res.status(500).json({ error: 'Failed to fetch content gaps' });\n    }\n  });\n\n  // Content creation endpoint\n  app.post('/api/content/create-draft', async (req, res) => {\n    try {\n      const { content_type, title, data } = req.body;\n\n      if (!content_type || !title || !data) {\n        return res.status(400).json({ error: 'content_type, title, and data are required' });\n      }\n\n      const result = await mockMCPClient.create_draft_content(content_type, title, data);\n      \n      if (result) {\n        res.json({ success: true, draft: result });\n      } else {\n        res.status(500).json({ error: 'Failed to create draft content' });\n      }\n    } catch (error) {\n      console.error('Draft creation error:', error);\n      res.status(500).json({ error: 'Failed to create draft content' });\n    }\n  });\n\n  // Chat history endpoints\n  app.get('/api/chat/history/:sessionId', async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const messages = await storage.getMessagesBySession(sessionId);\n      res.json(messages);\n    } catch (error) {\n      console.error('History fetch error:', error);\n      res.status(500).json({ error: 'Failed to fetch chat history' });\n    }\n  });\n\n  app.delete('/api/chat/history/:sessionId', async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      await storage.clearSessionMessages(sessionId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('History clear error:', error);\n      res.status(500).json({ error: 'Failed to clear chat history' });\n    }\n  });\n\n  // Health check endpoint\n  app.get('/api/health', (req, res) => {\n    res.json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      services: {\n        mcp: 'connected',\n        llm: 'available',\n        analytics: 'active'\n      }\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":11753},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type ChatSession,\n  type InsertChatSession,\n  type ChatMessage,\n  type InsertChatMessage,\n  type ContentGap,\n  type InsertContentGap\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Enhanced storage interface with chat functionality\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Chat session management\n  createSession(session: InsertChatSession): Promise<ChatSession>;\n  getSession(sessionId: string): Promise<ChatSession | undefined>;\n  updateSessionActivity(sessionId: string): Promise<void>;\n\n  // Chat message management\n  createMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getMessagesBySession(sessionId: string): Promise<ChatMessage[]>;\n  clearSessionMessages(sessionId: string): Promise<void>;\n\n  // Content gap management\n  createContentGap(gap: InsertContentGap): Promise<ContentGap>;\n  getContentGaps(): Promise<ContentGap[]>;\n  updateContentGapFrequency(query: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private sessions: Map<string, ChatSession>;\n  private messages: Map<string, ChatMessage>;\n  private contentGaps: Map<string, ContentGap>;\n\n  constructor() {\n    this.users = new Map();\n    this.sessions = new Map();\n    this.messages = new Map();\n    this.contentGaps = new Map();\n  }\n\n  // User management\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Chat session management\n  async createSession(insertSession: InsertChatSession): Promise<ChatSession> {\n    const id = randomUUID();\n    const now = new Date();\n    const session: ChatSession = {\n      ...insertSession,\n      id,\n      createdAt: now,\n      lastActivity: now,\n      userId: insertSession.userId || null\n    };\n    this.sessions.set(session.sessionId, session);\n    return session;\n  }\n\n  async getSession(sessionId: string): Promise<ChatSession | undefined> {\n    return this.sessions.get(sessionId);\n  }\n\n  async updateSessionActivity(sessionId: string): Promise<void> {\n    const session = this.sessions.get(sessionId);\n    if (session) {\n      session.lastActivity = new Date();\n      this.sessions.set(sessionId, session);\n    }\n  }\n\n  // Chat message management\n  async createMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = {\n      ...insertMessage,\n      id,\n      timestamp: new Date(),\n      metadata: insertMessage.metadata || null\n    };\n    this.messages.set(id, message);\n\n    // Update session activity\n    await this.updateSessionActivity(insertMessage.sessionId);\n    \n    return message;\n  }\n\n  async getMessagesBySession(sessionId: string): Promise<ChatMessage[]> {\n    const messages = Array.from(this.messages.values())\n      .filter(message => message.sessionId === sessionId)\n      .sort((a, b) => (a.timestamp?.getTime() || 0) - (b.timestamp?.getTime() || 0));\n    \n    return messages;\n  }\n\n  async clearSessionMessages(sessionId: string): Promise<void> {\n    const messagesToDelete = Array.from(this.messages.entries())\n      .filter(([_, message]) => message.sessionId === sessionId)\n      .map(([id, _]) => id);\n\n    messagesToDelete.forEach(id => this.messages.delete(id));\n  }\n\n  // Content gap management\n  async createContentGap(insertGap: InsertContentGap): Promise<ContentGap> {\n    const id = randomUUID();\n    const now = new Date();\n    const gap: ContentGap = {\n      ...insertGap,\n      id,\n      createdAt: now,\n      updatedAt: now,\n      status: insertGap.status || 'detected',\n      frequency: insertGap.frequency || 1,\n      suggestedContentType: insertGap.suggestedContentType || null\n    };\n    \n    // Use query as key to prevent duplicates\n    const existingGap = Array.from(this.contentGaps.values())\n      .find(g => g.query.toLowerCase() === gap.query.toLowerCase());\n    \n    if (existingGap) {\n      // Update frequency instead of creating new\n      existingGap.frequency = (existingGap.frequency || 1) + 1;\n      existingGap.updatedAt = now;\n      this.contentGaps.set(existingGap.id, existingGap);\n      return existingGap;\n    }\n\n    this.contentGaps.set(id, gap);\n    return gap;\n  }\n\n  async getContentGaps(): Promise<ContentGap[]> {\n    return Array.from(this.contentGaps.values())\n      .sort((a, b) => {\n        // Sort by priority first (high -> medium -> low), then by frequency\n        const priorityOrder = { high: 3, medium: 2, low: 1 };\n        const aPriority = priorityOrder[a.priority as keyof typeof priorityOrder] || 1;\n        const bPriority = priorityOrder[b.priority as keyof typeof priorityOrder] || 1;\n        \n        if (aPriority !== bPriority) {\n          return bPriority - aPriority;\n        }\n        \n        return (b.frequency || 1) - (a.frequency || 1);\n      });\n  }\n\n  async updateContentGapFrequency(query: string): Promise<void> {\n    const gap = Array.from(this.contentGaps.values())\n      .find(g => g.query.toLowerCase() === query.toLowerCase());\n    \n    if (gap) {\n      gap.frequency = (gap.frequency || 1) + 1;\n      gap.updatedAt = new Date();\n      this.contentGaps.set(gap.id, gap);\n    }\n  }\n\n  // Utility methods for analytics and cleanup\n  async getSessionCount(): Promise<number> {\n    return this.sessions.size;\n  }\n\n  async getMessageCount(): Promise<number> {\n    return this.messages.size;\n  }\n\n  async getActiveSessionsCount(hoursBack: number = 24): Promise<number> {\n    const cutoff = new Date(Date.now() - hoursBack * 60 * 60 * 1000);\n    return Array.from(this.sessions.values())\n      .filter(session => (session.lastActivity?.getTime() || 0) > cutoff.getTime())\n      .length;\n  }\n\n  async getRecentMessages(hoursBack: number = 24): Promise<ChatMessage[]> {\n    const cutoff = new Date(Date.now() - hoursBack * 60 * 60 * 1000);\n    return Array.from(this.messages.values())\n      .filter(message => (message.timestamp?.getTime() || 0) > cutoff.getTime())\n      .sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0));\n  }\n\n  // Cleanup old data\n  async cleanupOldSessions(daysBack: number = 30): Promise<number> {\n    const cutoff = new Date(Date.now() - daysBack * 24 * 60 * 60 * 1000);\n    const oldSessions = Array.from(this.sessions.entries())\n      .filter(([_, session]) => (session.lastActivity?.getTime() || 0) < cutoff.getTime());\n\n    // Remove old sessions and their messages\n    let deletedCount = 0;\n    for (const [sessionId, session] of oldSessions) {\n      await this.clearSessionMessages(session.sessionId);\n      this.sessions.delete(sessionId);\n      deletedCount++;\n    }\n\n    return deletedCount;\n  }\n\n  async cleanupOldMessages(daysBack: number = 30): Promise<number> {\n    const cutoff = new Date(Date.now() - daysBack * 24 * 60 * 60 * 1000);\n    const oldMessages = Array.from(this.messages.entries())\n      .filter(([_, message]) => (message.timestamp?.getTime() || 0) < cutoff.getTime());\n\n    oldMessages.forEach(([id, _]) => this.messages.delete(id));\n    return oldMessages.length;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":7647},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const chatSessions = pgTable(\"chat_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  sessionId: text(\"session_id\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastActivity: timestamp(\"last_activity\").defaultNow(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull(),\n  role: text(\"role\").notNull(), // 'user' | 'assistant'\n  content: text(\"content\").notNull(),\n  metadata: jsonb(\"metadata\"), // response time, content references, etc.\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const contentGaps = pgTable(\"content_gaps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  query: text(\"query\").notNull(),\n  frequency: integer(\"frequency\").default(1),\n  priority: text(\"priority\").notNull(), // 'high' | 'medium' | 'low'\n  suggestedContentType: text(\"suggested_content_type\"),\n  status: text(\"status\").default(\"detected\"), // 'detected' | 'draft_created' | 'published'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const analytics = pgTable(\"analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: timestamp(\"date\").defaultNow(),\n  totalQueries: integer(\"total_queries\").default(0),\n  averageResponseTime: integer(\"average_response_time\").default(0),\n  successRate: integer(\"success_rate\").default(0), // percentage * 100\n  contentGapsCount: integer(\"content_gaps_count\").default(0),\n});\n\n// Schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertChatSessionSchema = createInsertSchema(chatSessions).pick({\n  sessionId: true,\n  userId: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).pick({\n  sessionId: true,\n  role: true,\n  content: true,\n  metadata: true,\n});\n\nexport const insertContentGapSchema = createInsertSchema(contentGaps).pick({\n  query: true,\n  frequency: true,\n  priority: true,\n  suggestedContentType: true,\n  status: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertChatSession = z.infer<typeof insertChatSessionSchema>;\nexport type ChatSession = typeof chatSessions.$inferSelect;\n\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\n\nexport type InsertContentGap = z.infer<typeof insertContentGapSchema>;\nexport type ContentGap = typeof contentGaps.$inferSelect;\n\nexport type Analytics = typeof analytics.$inferSelect;\n","size_bytes":3235},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":827},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(222 15% 15%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 15% 15%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 15% 15%);\n  --primary: hsl(221 83% 53%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(249 71% 56%);\n  --secondary-foreground: hsl(0 0% 98%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(262 83% 58%);\n  --accent-foreground: hsl(0 0% 98%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(221 83% 53%);\n  --chart-1: hsl(221 83% 53%);\n  --chart-2: hsl(159 100% 36%);\n  --chart-3: hsl(42 93% 56%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(180 7% 97%);\n  --sidebar-foreground: hsl(222 15% 15%);\n  --sidebar-primary: hsl(221 83% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 98%);\n  --sidebar-accent: hsl(262 83% 58%);\n  --sidebar-accent-foreground: hsl(0 0% 98%);\n  --sidebar-border: hsl(205 25% 91%);\n  --sidebar-ring: hsl(221 83% 53%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221 83% 53% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221 83% 53% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221 83% 53% / 0.00), 0px 1px 2px -1px hsl(221 83% 53% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221 83% 53% / 0.00), 0px 1px 2px -1px hsl(221 83% 53% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221 83% 53% / 0.00), 0px 2px 4px -1px hsl(221 83% 53% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221 83% 53% / 0.00), 0px 4px 6px -1px hsl(221 83% 53% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221 83% 53% / 0.00), 0px 8px 10px -1px hsl(221 83% 53% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221 83% 53% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222 15% 8%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 15% 11%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 15% 11%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(221 83% 53%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(222 15% 15%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(222 15% 15%);\n  --muted-foreground: hsl(215 16% 57%);\n  --accent: hsl(262 83% 58%);\n  --accent-foreground: hsl(0 0% 98%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(222 15% 20%);\n  --input: hsl(222 15% 20%);\n  --ring: hsl(221 83% 53%);\n  --chart-1: hsl(221 83% 53%);\n  --chart-2: hsl(159 100% 36%);\n  --chart-3: hsl(42 93% 56%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(222 15% 11%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(221 83% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 98%);\n  --sidebar-accent: hsl(262 83% 58%);\n  --sidebar-accent-foreground: hsl(0 0% 98%);\n  --sidebar-border: hsl(222 15% 20%);\n  --sidebar-ring: hsl(221 83% 53%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221 83% 53% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221 83% 53% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221 83% 53% / 0.00), 0px 1px 2px -1px hsl(221 83% 53% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221 83% 53% / 0.00), 0px 1px 2px -1px hsl(221 83% 53% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221 83% 53% / 0.00), 0px 2px 4px -1px hsl(221 83% 53% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221 83% 53% / 0.00), 0px 4px 6px -1px hsl(221 83% 53% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221 83% 53% / 0.00), 0px 8px 10px -1px hsl(221 83% 53% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221 83% 53% / 0.00);\n}\n\n/* Custom gradient utilities */\n.gradient-bg {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--secondary)) 100%);\n}\n\n/* Animation utilities */\n.typing-indicator {\n  animation: typing 1.5s infinite;\n}\n\n@keyframes typing {\n  0%, 60%, 100% { \n    opacity: 0.3; \n  }\n  30% { \n    opacity: 1; \n  }\n}\n\n.pulse-ring {\n  animation: pulse-ring 2s infinite;\n}\n\n@keyframes pulse-ring {\n  0% { \n    transform: scale(1); \n    opacity: 1; \n  }\n  100% { \n    transform: scale(1.2); \n    opacity: 0; \n  }\n}\n\n.slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n@keyframes slideUp {\n  from { \n    transform: translateY(100%); \n    opacity: 0; \n  }\n  to { \n    transform: translateY(0); \n    opacity: 1; \n  }\n}\n\n/* Content card utilities */\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    @apply bg-muted;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    @apply bg-muted-foreground rounded-full;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    @apply bg-primary;\n  }\n}\n\n/* Component-specific styles */\n.prose {\n  @apply text-foreground;\n}\n\n.prose h1,\n.prose h2,\n.prose h3,\n.prose h4,\n.prose h5,\n.prose h6 {\n  @apply text-foreground;\n}\n\n.prose p {\n  @apply text-foreground;\n}\n\n.prose code {\n  @apply bg-muted text-foreground px-1 py-0.5 rounded;\n}\n\n.prose pre {\n  @apply bg-muted text-foreground;\n}\n\n.prose blockquote {\n  @apply border-l-primary text-foreground;\n}\n\n.prose a {\n  @apply text-primary hover:opacity-80;\n}\n\n/* Dark theme prose adjustments */\n.dark .prose {\n  @apply text-foreground;\n}\n\n.dark .prose h1,\n.dark .prose h2,\n.dark .prose h3,\n.dark .prose h4,\n.dark .prose h5,\n.dark .prose h6 {\n  @apply text-foreground;\n}\n\n.dark .prose p {\n  @apply text-foreground;\n}\n\n.dark .prose code {\n  @apply bg-muted text-foreground;\n}\n\n.dark .prose pre {\n  @apply bg-muted text-foreground;\n}\n\n.dark .prose blockquote {\n  @apply border-l-primary text-foreground;\n}\n","size_bytes":6202},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/analytics_service.py":{"content":"import json\nimport redis\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional, Any\nimport os\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass AnalyticsService:\n    \"\"\"Real-time analytics service with Redis caching\"\"\"\n    \n    def __init__(self):\n        redis_url = os.getenv(\"REDIS_URL\", \"redis://localhost:6379\")\n        try:\n            self.redis_client = redis.from_url(redis_url, decode_responses=True)\n            # Test connection\n            self.redis_client.ping()\n        except Exception as e:\n            logger.warning(f\"Redis connection failed, using in-memory storage: {e}\")\n            self.redis_client = None\n            self._memory_storage = {}\n    \n    async def track_query(self, session_id: str, query: str, response_time_ms: float, success: bool):\n        \"\"\"Track a user query with analytics\"\"\"\n        \n        timestamp = datetime.now()\n        query_data = {\n            \"session_id\": session_id,\n            \"query\": query,\n            \"response_time_ms\": response_time_ms,\n            \"success\": success,\n            \"timestamp\": timestamp.isoformat()\n        }\n        \n        # Store in Redis or memory\n        if self.redis_client:\n            # Store individual query\n            query_key = f\"query:{session_id}:{timestamp.timestamp()}\"\n            self.redis_client.setex(query_key, 86400, json.dumps(query_data))  # 24h TTL\n            \n            # Update aggregate stats\n            await self._update_aggregate_stats(query_data)\n        else:\n            # Memory storage fallback\n            if \"queries\" not in self._memory_storage:\n                self._memory_storage[\"queries\"] = []\n            self._memory_storage[\"queries\"].append(query_data)\n    \n    async def track_content_gap(self, query: str, gap_data: Dict[str, Any]):\n        \"\"\"Track identified content gaps\"\"\"\n        \n        timestamp = datetime.now()\n        gap_record = {\n            \"query\": query,\n            \"gap_data\": gap_data,\n            \"timestamp\": timestamp.isoformat()\n        }\n        \n        if self.redis_client:\n            gap_key = f\"content_gap:{hash(query)}\"\n            existing = self.redis_client.get(gap_key)\n            \n            if existing:\n                # Increment frequency\n                existing_data = json.loads(existing)\n                existing_data[\"frequency\"] = existing_data.get(\"frequency\", 1) + 1\n                existing_data[\"last_seen\"] = timestamp.isoformat()\n                self.redis_client.setex(gap_key, 86400 * 7, json.dumps(existing_data))  # 7 days TTL\n            else:\n                # New gap\n                gap_record[\"frequency\"] = 1\n                self.redis_client.setex(gap_key, 86400 * 7, json.dumps(gap_record))\n        else:\n            # Memory storage\n            if \"content_gaps\" not in self._memory_storage:\n                self._memory_storage[\"content_gaps\"] = {}\n            \n            query_hash = str(hash(query))\n            if query_hash in self._memory_storage[\"content_gaps\"]:\n                self._memory_storage[\"content_gaps\"][query_hash][\"frequency\"] += 1\n            else:\n                gap_record[\"frequency\"] = 1\n                self._memory_storage[\"content_gaps\"][query_hash] = gap_record\n    \n    async def get_analytics_summary(self) -> Dict[str, Any]:\n        \"\"\"Get real-time analytics summary\"\"\"\n        \n        try:\n            if self.redis_client:\n                return await self._get_redis_analytics()\n            else:\n                return await self._get_memory_analytics()\n        except Exception as e:\n            logger.error(f\"Error getting analytics: {e}\")\n            return self._get_default_analytics()\n    \n    async def get_query_trends(self, days: int = 7) -> List[Dict[str, Any]]:\n        \"\"\"Get query trends over time\"\"\"\n        \n        trends = []\n        end_date = datetime.now()\n        \n        for i in range(days):\n            date = end_date - timedelta(days=i)\n            day_key = date.strftime(\"%Y-%m-%d\")\n            \n            if self.redis_client:\n                count = self.redis_client.get(f\"daily_queries:{day_key}\") or 0\n            else:\n                count = self._get_memory_daily_count(date)\n            \n            trends.append({\n                \"date\": day_key,\n                \"queries\": int(count)\n            })\n        \n        return list(reversed(trends))\n    \n    async def get_top_queries(self, limit: int = 10) -> List[Dict[str, Any]]:\n        \"\"\"Get most frequent queries\"\"\"\n        \n        if self.redis_client:\n            # Get all query keys and count frequencies\n            query_keys = self.redis_client.keys(\"query:*\")\n            query_counts = {}\n            \n            for key in query_keys:\n                data = json.loads(self.redis_client.get(key) or \"{}\")\n                query = data.get(\"query\", \"\")\n                if query:\n                    query_counts[query] = query_counts.get(query, 0) + 1\n            \n            # Sort by frequency\n            sorted_queries = sorted(query_counts.items(), key=lambda x: x[1], reverse=True)\n            \n            return [\n                {\n                    \"query\": query,\n                    \"count\": count,\n                    \"category\": self._categorize_query(query)\n                }\n                for query, count in sorted_queries[:limit]\n            ]\n        else:\n            # Memory storage\n            queries = self._memory_storage.get(\"queries\", [])\n            query_counts = {}\n            \n            for query_data in queries:\n                query = query_data.get(\"query\", \"\")\n                if query:\n                    query_counts[query] = query_counts.get(query, 0) + 1\n            \n            sorted_queries = sorted(query_counts.items(), key=lambda x: x[1], reverse=True)\n            \n            return [\n                {\n                    \"query\": query,\n                    \"count\": count,\n                    \"category\": self._categorize_query(query)\n                }\n                for query, count in sorted_queries[:limit]\n            ]\n    \n    async def get_content_gaps(self) -> List[Dict[str, Any]]:\n        \"\"\"Get identified content gaps\"\"\"\n        \n        if self.redis_client:\n            gap_keys = self.redis_client.keys(\"content_gap:*\")\n            gaps = []\n            \n            for key in gap_keys:\n                gap_data = json.loads(self.redis_client.get(key) or \"{}\")\n                gaps.append(gap_data)\n            \n            # Sort by frequency and priority\n            return sorted(gaps, key=lambda x: (\n                self._priority_score(x.get(\"gap_data\", {}).get(\"priority\", \"low\")),\n                x.get(\"frequency\", 0)\n            ), reverse=True)\n        else:\n            # Memory storage\n            gaps = list(self._memory_storage.get(\"content_gaps\", {}).values())\n            return sorted(gaps, key=lambda x: (\n                self._priority_score(x.get(\"gap_data\", {}).get(\"priority\", \"low\")),\n                x.get(\"frequency\", 0)\n            ), reverse=True)\n    \n    async def _update_aggregate_stats(self, query_data: Dict[str, Any]):\n        \"\"\"Update aggregate statistics in Redis\"\"\"\n        \n        date_key = datetime.now().strftime(\"%Y-%m-%d\")\n        \n        # Daily query count\n        self.redis_client.incr(f\"daily_queries:{date_key}\")\n        self.redis_client.expire(f\"daily_queries:{date_key}\", 86400 * 30)  # 30 days\n        \n        # Response time tracking\n        response_time = query_data.get(\"response_time_ms\", 0)\n        self.redis_client.lpush(f\"response_times:{date_key}\", response_time)\n        self.redis_client.ltrim(f\"response_times:{date_key}\", 0, 999)  # Keep last 1000\n        self.redis_client.expire(f\"response_times:{date_key}\", 86400)\n        \n        # Success rate tracking\n        success = 1 if query_data.get(\"success\", False) else 0\n        self.redis_client.lpush(f\"success_rate:{date_key}\", success)\n        self.redis_client.ltrim(f\"success_rate:{date_key}\", 0, 999)\n        self.redis_client.expire(f\"success_rate:{date_key}\", 86400)\n    \n    async def _get_redis_analytics(self) -> Dict[str, Any]:\n        \"\"\"Get analytics from Redis\"\"\"\n        \n        today = datetime.now().strftime(\"%Y-%m-%d\")\n        \n        # Total queries (last 7 days)\n        total_queries = 0\n        for i in range(7):\n            date = (datetime.now() - timedelta(days=i)).strftime(\"%Y-%m-%d\")\n            daily_count = int(self.redis_client.get(f\"daily_queries:{date}\") or 0)\n            total_queries += daily_count\n        \n        # Average response time\n        response_times = [\n            float(x) for x in self.redis_client.lrange(f\"response_times:{today}\", 0, -1)\n        ]\n        avg_response_time = sum(response_times) / len(response_times) if response_times else 0\n        \n        # Success rate\n        success_records = [\n            int(x) for x in self.redis_client.lrange(f\"success_rate:{today}\", 0, -1)\n        ]\n        success_rate = (sum(success_records) / len(success_records) * 100) if success_records else 0\n        \n        # Content gaps count\n        content_gaps_count = len(self.redis_client.keys(\"content_gap:*\"))\n        \n        return {\n            \"total_queries\": total_queries,\n            \"average_response_time_ms\": round(avg_response_time),\n            \"success_rate\": round(success_rate, 1),\n            \"content_gaps_count\": content_gaps_count,\n            \"last_updated\": datetime.now().isoformat()\n        }\n    \n    async def _get_memory_analytics(self) -> Dict[str, Any]:\n        \"\"\"Get analytics from memory storage\"\"\"\n        \n        queries = self._memory_storage.get(\"queries\", [])\n        content_gaps = self._memory_storage.get(\"content_gaps\", {})\n        \n        # Filter last 7 days\n        week_ago = datetime.now() - timedelta(days=7)\n        recent_queries = [\n            q for q in queries \n            if datetime.fromisoformat(q[\"timestamp\"]) > week_ago\n        ]\n        \n        total_queries = len(recent_queries)\n        \n        # Average response time\n        if recent_queries:\n            avg_response_time = sum(q.get(\"response_time_ms\", 0) for q in recent_queries) / len(recent_queries)\n            success_rate = (sum(1 for q in recent_queries if q.get(\"success\", False)) / len(recent_queries)) * 100\n        else:\n            avg_response_time = 0\n            success_rate = 0\n        \n        return {\n            \"total_queries\": total_queries,\n            \"average_response_time_ms\": round(avg_response_time),\n            \"success_rate\": round(success_rate, 1),\n            \"content_gaps_count\": len(content_gaps),\n            \"last_updated\": datetime.now().isoformat()\n        }\n    \n    def _get_memory_daily_count(self, date: datetime) -> int:\n        \"\"\"Get daily query count from memory\"\"\"\n        \n        queries = self._memory_storage.get(\"queries\", [])\n        date_str = date.strftime(\"%Y-%m-%d\")\n        \n        return len([\n            q for q in queries\n            if datetime.fromisoformat(q[\"timestamp\"]).strftime(\"%Y-%m-%d\") == date_str\n        ])\n    \n    def _categorize_query(self, query: str) -> str:\n        \"\"\"Simple query categorization\"\"\"\n        \n        query_lower = query.lower()\n        \n        if any(word in query_lower for word in [\"hotel\", \"accommodation\", \"stay\"]):\n            return \"Hotels\"\n        elif any(word in query_lower for word in [\"tour\", \"trip\", \"travel\"]):\n            return \"Tours\"\n        elif any(word in query_lower for word in [\"restaurant\", \"food\", \"dining\"]):\n            return \"Dining\"\n        elif any(word in query_lower for word in [\"price\", \"cost\", \"budget\"]):\n            return \"Pricing\"\n        else:\n            return \"General\"\n    \n    def _priority_score(self, priority: str) -> int:\n        \"\"\"Convert priority to numeric score\"\"\"\n        \n        return {\"high\": 3, \"medium\": 2, \"low\": 1}.get(priority, 1)\n    \n    def _get_default_analytics(self) -> Dict[str, Any]:\n        \"\"\"Default analytics when service is unavailable\"\"\"\n        \n        return {\n            \"total_queries\": 0,\n            \"average_response_time_ms\": 0,\n            \"success_rate\": 0,\n            \"content_gaps_count\": 0,\n            \"last_updated\": datetime.now().isoformat()\n        }\n\n# Global analytics service instance\nanalytics_service = AnalyticsService()\n","size_bytes":12320},"server/services/llm_service.py":{"content":"import os\nimport json\nimport asyncio\nimport logging\nfrom typing import Dict, List, Optional, Any, AsyncGenerator\nimport openai\nimport httpx\nfrom datetime import datetime\n\nlogger = logging.getLogger(__name__)\n\nclass LLMService:\n    \"\"\"Multi-provider LLM service with Groq and OpenAI support\"\"\"\n    \n    def __init__(self):\n        self.groq_api_key = os.getenv(\"GROQ_API_KEY\")\n        self.openai_api_key = os.getenv(\"OPENAI_API_KEY\")\n        self.groq_base_url = \"https://api.groq.com/openai/v1\"\n        \n        # Initialize OpenAI client\n        if self.openai_api_key:\n            self.openai_client = openai.AsyncOpenAI(api_key=self.openai_api_key)\n        else:\n            self.openai_client = None\n            \n        # Initialize Groq client (using OpenAI-compatible API)\n        if self.groq_api_key:\n            self.groq_client = openai.AsyncOpenAI(\n                api_key=self.groq_api_key,\n                base_url=self.groq_base_url\n            )\n        else:\n            self.groq_client = None\n    \n    async def generate_response(\n        self, \n        messages: List[Dict[str, str]], \n        content_context: List[Dict[str, Any]] = None,\n        stream: bool = False\n    ) -> AsyncGenerator[Dict[str, Any], None]:\n        \"\"\"Generate AI response with fallback support\"\"\"\n        \n        # Enhance messages with content context\n        enhanced_messages = self._enhance_messages_with_context(messages, content_context)\n        \n        # Try Groq first, fallback to OpenAI\n        try:\n            if self.groq_client:\n                async for chunk in self._generate_with_groq(enhanced_messages, stream):\n                    yield chunk\n                return\n        except Exception as e:\n            logger.warning(f\"Groq generation failed, falling back to OpenAI: {e}\")\n        \n        # Fallback to OpenAI\n        try:\n            if self.openai_client:\n                async for chunk in self._generate_with_openai(enhanced_messages, stream):\n                    yield chunk\n                return\n        except Exception as e:\n            logger.error(f\"OpenAI generation also failed: {e}\")\n        \n        # Both providers failed\n        yield {\n            \"chunk\": \"I'm sorry, I'm experiencing technical difficulties. Please try again later.\",\n            \"done\": True,\n            \"error\": True\n        }\n    \n    async def _generate_with_groq(\n        self, \n        messages: List[Dict[str, str]], \n        stream: bool = False\n    ) -> AsyncGenerator[Dict[str, Any], None]:\n        \"\"\"Generate response using Groq\"\"\"\n        start_time = datetime.now()\n        \n        try:\n            response = await self.groq_client.chat.completions.create(\n                model=\"llama3-8b-8192\",\n                messages=messages,\n                temperature=0.7,\n                max_tokens=1024,\n                stream=stream\n            )\n            \n            if stream:\n                full_response = \"\"\n                async for chunk in response:\n                    if chunk.choices[0].delta.content:\n                        content = chunk.choices[0].delta.content\n                        full_response += content\n                        yield {\n                            \"chunk\": content,\n                            \"done\": False,\n                            \"provider\": \"groq\"\n                        }\n                \n                response_time = (datetime.now() - start_time).total_seconds() * 1000\n                yield {\n                    \"chunk\": \"\",\n                    \"done\": True,\n                    \"response_time_ms\": response_time,\n                    \"provider\": \"groq\"\n                }\n            else:\n                content = response.choices[0].message.content\n                response_time = (datetime.now() - start_time).total_seconds() * 1000\n                yield {\n                    \"chunk\": content,\n                    \"done\": True,\n                    \"response_time_ms\": response_time,\n                    \"provider\": \"groq\"\n                }\n                \n        except Exception as e:\n            logger.error(f\"Groq generation error: {e}\")\n            raise\n    \n    async def _generate_with_openai(\n        self, \n        messages: List[Dict[str, str]], \n        stream: bool = False\n    ) -> AsyncGenerator[Dict[str, Any], None]:\n        \"\"\"Generate response using OpenAI\"\"\"\n        start_time = datetime.now()\n        \n        try:\n            # the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n            response = await self.openai_client.chat.completions.create(\n                model=\"gpt-5\",\n                messages=messages,\n                temperature=0.7,\n                max_tokens=1024,\n                stream=stream\n            )\n            \n            if stream:\n                full_response = \"\"\n                async for chunk in response:\n                    if chunk.choices[0].delta.content:\n                        content = chunk.choices[0].delta.content\n                        full_response += content\n                        yield {\n                            \"chunk\": content,\n                            \"done\": False,\n                            \"provider\": \"openai\"\n                        }\n                \n                response_time = (datetime.now() - start_time).total_seconds() * 1000\n                yield {\n                    \"chunk\": \"\",\n                    \"done\": True,\n                    \"response_time_ms\": response_time,\n                    \"provider\": \"openai\"\n                }\n            else:\n                content = response.choices[0].message.content\n                response_time = (datetime.now() - start_time).total_seconds() * 1000\n                yield {\n                    \"chunk\": content,\n                    \"done\": True,\n                    \"response_time_ms\": response_time,\n                    \"provider\": \"openai\"\n                }\n                \n        except Exception as e:\n            logger.error(f\"OpenAI generation error: {e}\")\n            raise\n    \n    def _enhance_messages_with_context(\n        self, \n        messages: List[Dict[str, str]], \n        content_context: List[Dict[str, Any]] = None\n    ) -> List[Dict[str, str]]:\n        \"\"\"Enhance messages with content context from CMS\"\"\"\n        \n        system_prompt = \"\"\"You are ContentIQ, an AI assistant powered by Contentstack MCP integration. \n        You help users find information about travel content, tours, hotels, and travel guides.\n        \n        When content is found in the CMS, reference it naturally in your responses.\n        If no relevant content is found, acknowledge this and suggest what content might be helpful.\n        \n        Always be helpful, accurate, and engaging in your responses.\"\"\"\n        \n        if content_context:\n            context_text = \"\\n\\nAvailable content from CMS:\\n\"\n            for item in content_context:\n                context_text += f\"- {item.get('title', 'Untitled')}: {item.get('description', 'No description')}\\n\"\n            \n            system_prompt += context_text\n        \n        enhanced_messages = [{\"role\": \"system\", \"content\": system_prompt}]\n        enhanced_messages.extend(messages)\n        \n        return enhanced_messages\n    \n    async def analyze_content_gap(self, query: str, available_content: List[Dict[str, Any]]) -> Dict[str, Any]:\n        \"\"\"Analyze if query represents a content gap\"\"\"\n        \n        try:\n            messages = [\n                {\n                    \"role\": \"system\",\n                    \"content\": \"\"\"Analyze if the user query represents a content gap based on available content.\n                    Respond with JSON in this format:\n                    {\n                        \"is_gap\": boolean,\n                        \"priority\": \"high|medium|low\",\n                        \"suggested_content_type\": \"string\",\n                        \"suggested_title\": \"string\",\n                        \"reason\": \"string\"\n                    }\"\"\"\n                },\n                {\n                    \"role\": \"user\",\n                    \"content\": f\"Query: {query}\\nAvailable content: {json.dumps(available_content)}\"\n                }\n            ]\n            \n            if self.openai_client:\n                response = await self.openai_client.chat.completions.create(\n                    model=\"gpt-5\", # the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n                    messages=messages,\n                    response_format={\"type\": \"json_object\"},\n                    temperature=0.3\n                )\n                \n                return json.loads(response.choices[0].message.content)\n            \n            # Fallback analysis if no OpenAI\n            return {\n                \"is_gap\": len(available_content) == 0,\n                \"priority\": \"medium\",\n                \"suggested_content_type\": \"article\",\n                \"suggested_title\": f\"Guide about {query}\",\n                \"reason\": \"No relevant content found for this query\"\n            }\n            \n        except Exception as e:\n            logger.error(f\"Content gap analysis failed: {e}\")\n            return {\n                \"is_gap\": False,\n                \"priority\": \"low\",\n                \"suggested_content_type\": \"article\",\n                \"suggested_title\": \"\",\n                \"reason\": \"Analysis failed\"\n            }\n\n# Global LLM service instance\nllm_service = LLMService()\n","size_bytes":9572},"server/services/mcp_client.py":{"content":"import subprocess\nimport json\nimport asyncio\nimport logging\nfrom typing import Dict, List, Optional, Any\nimport os\n\nlogger = logging.getLogger(__name__)\n\nclass MCPClient:\n    \"\"\"MCP client for Contentstack integration\"\"\"\n    \n    def __init__(self):\n        self.mcp_command = \"npx\"\n        self.mcp_args = [\"-y\", \"@contentstack/mcp\"]\n        self.api_key = os.getenv(\"CONTENTSTACK_API_KEY\")\n        self.delivery_token = os.getenv(\"CONTENTSTACK_DELIVERY_TOKEN\")\n        self.management_token = os.getenv(\"CONTENTSTACK_MANAGEMENT_TOKEN\")\n        self.environment = os.getenv(\"CONTENTSTACK_ENVIRONMENT\", \"development\")\n        self.launch_project_id = os.getenv(\"CONTENTSTACK_LAUNCH_PROJECT_ID\")\n        \n    async def initialize_connection(self) -> bool:\n        \"\"\"Initialize MCP connection with Contentstack\"\"\"\n        try:\n            # Test MCP connection\n            result = await self._execute_mcp_command(\"test\", {})\n            return result is not None\n        except Exception as e:\n            logger.error(f\"Failed to initialize MCP connection: {e}\")\n            return False\n    \n    async def fetch_content(self, content_type: str, query: str = None) -> List[Dict[str, Any]]:\n        \"\"\"Fetch content via MCP Delivery API\"\"\"\n        try:\n            params = {\n                \"content_type\": content_type,\n                \"environment\": self.environment,\n                \"api_key\": self.api_key,\n                \"delivery_token\": self.delivery_token\n            }\n            \n            if query:\n                params[\"query\"] = query\n            \n            result = await self._execute_mcp_command(\"fetch_content\", params)\n            return result.get(\"entries\", []) if result else []\n            \n        except Exception as e:\n            logger.error(f\"Error fetching content via MCP: {e}\")\n            return []\n    \n    async def create_draft_content(self, content_type: str, title: str, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:\n        \"\"\"Create draft content via MCP CMA API\"\"\"\n        try:\n            params = {\n                \"content_type\": content_type,\n                \"title\": title,\n                \"data\": data,\n                \"environment\": self.environment,\n                \"api_key\": self.api_key,\n                \"management_token\": self.management_token\n            }\n            \n            result = await self._execute_mcp_command(\"create_draft_content\", params)\n            return result\n            \n        except Exception as e:\n            logger.error(f\"Error creating draft content via MCP: {e}\")\n            return None\n    \n    async def search_content(self, query: str, content_types: List[str] = None) -> List[Dict[str, Any]]:\n        \"\"\"Search content across multiple content types\"\"\"\n        try:\n            params = {\n                \"query\": query,\n                \"environment\": self.environment,\n                \"api_key\": self.api_key,\n                \"delivery_token\": self.delivery_token\n            }\n            \n            if content_types:\n                params[\"content_types\"] = content_types\n            \n            result = await self._execute_mcp_command(\"search_content\", params)\n            return result.get(\"entries\", []) if result else []\n            \n        except Exception as e:\n            logger.error(f\"Error searching content via MCP: {e}\")\n            return []\n    \n    async def get_content_types(self) -> List[Dict[str, Any]]:\n        \"\"\"Get available content types\"\"\"\n        try:\n            params = {\n                \"api_key\": self.api_key,\n                \"delivery_token\": self.delivery_token\n            }\n            \n            result = await self._execute_mcp_command(\"get_content_types\", params)\n            return result.get(\"content_types\", []) if result else []\n            \n        except Exception as e:\n            logger.error(f\"Error fetching content types via MCP: {e}\")\n            return []\n    \n    async def _execute_mcp_command(self, command: str, params: Dict[str, Any]) -> Optional[Dict[str, Any]]:\n        \"\"\"Execute MCP command with parameters\"\"\"\n        try:\n            cmd = [self.mcp_command] + self.mcp_args + [command, json.dumps(params)]\n            \n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE\n            )\n            \n            stdout, stderr = await process.communicate()\n            \n            if process.returncode == 0:\n                return json.loads(stdout.decode())\n            else:\n                logger.error(f\"MCP command failed: {stderr.decode()}\")\n                return None\n                \n        except Exception as e:\n            logger.error(f\"Error executing MCP command: {e}\")\n            return None\n\n# Global MCP client instance\nmcp_client = MCPClient()\n","size_bytes":4870},"client/src/components/AnalyticsDashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAnalytics } from \"@/hooks/useAnalytics\";\nimport { \n  MessageSquare, Clock, CheckCircle, AlertTriangle, \n  TrendingUp, TrendingDown, Plus, ArrowUp, ArrowDown,\n  Lightbulb\n} from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\n\nexport function AnalyticsDashboard() {\n  const { analytics, queryTrends, topQueries, contentGaps } = useAnalytics();\n  const [selectedPeriod, setSelectedPeriod] = useState(\"7d\");\n\n  const statsCards = [\n    {\n      title: \"Total Queries\",\n      value: analytics?.total_queries || 0,\n      icon: MessageSquare,\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-100 dark:bg-blue-900\",\n      change: \"+12%\",\n      trend: \"up\"\n    },\n    {\n      title: \"Avg Response\",\n      value: `${analytics?.average_response_time_ms || 0}ms`,\n      icon: Clock,\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-100 dark:bg-purple-900\",\n      change: \"-8%\",\n      trend: \"down\"\n    },\n    {\n      title: \"Success Rate\",\n      value: `${analytics?.success_rate || 0}%`,\n      icon: CheckCircle,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-100 dark:bg-green-900\",\n      change: \"+2.1%\",\n      trend: \"up\"\n    },\n    {\n      title: \"Content Gaps\",\n      value: analytics?.content_gaps_count || 0,\n      icon: AlertTriangle,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-100 dark:bg-orange-900\",\n      change: \"+5\",\n      trend: \"up\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Analytics Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        {statsCards.map((stat, index) => (\n          <Card key={index} data-testid={`stat-card-${stat.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">{stat.title}</p>\n                  <p className=\"text-2xl font-bold text-foreground mt-1\" data-testid={`stat-value-${index}`}>\n                    {stat.value}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 ${stat.bgColor} rounded-lg flex items-center justify-center`}>\n                  <stat.icon className={`${stat.color} h-6 w-6`} />\n                </div>\n              </div>\n              <div className=\"flex items-center mt-4 text-sm\">\n                {stat.trend === \"up\" ? (\n                  <ArrowUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                ) : (\n                  <ArrowDown className=\"h-4 w-4 text-green-500 mr-1\" />\n                )}\n                <span className=\"text-green-500 font-medium\">{stat.change}</span>\n                <span className=\"text-muted-foreground ml-1\">vs last week</span>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Query Trends Chart */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Query Trends</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                {[\"7d\", \"30d\", \"90d\"].map((period) => (\n                  <Button\n                    key={period}\n                    variant={selectedPeriod === period ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedPeriod(period)}\n                    data-testid={`button-period-${period}`}\n                  >\n                    {period}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              {queryTrends && queryTrends.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={queryTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      className=\"text-muted-foreground text-xs\"\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis className=\"text-muted-foreground text-xs\" />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: 'hsl(var(--card))', \n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '8px'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"queries\" \n                      stroke=\"hsl(var(--primary))\" \n                      strokeWidth={2}\n                      dot={{ fill: 'hsl(var(--primary))', strokeWidth: 2 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"h-full bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">No trend data available</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Top Queries */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Top Queries</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {topQueries && topQueries.length > 0 ? (\n                topQueries.slice(0, 5).map((query, index) => (\n                  <div key={index} className=\"flex items-center justify-between\" data-testid={`top-query-${index}`}>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-foreground truncate\">{query.query}</p>\n                      <p className=\"text-xs text-muted-foreground\">{query.category}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-bold text-foreground\">{query.count}</p>\n                      <p className=\"text-xs text-green-500\">+12%</p>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-muted-foreground text-sm text-center py-8\">No query data available</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Content Gap Alerts */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-orange-100 dark:bg-orange-900 rounded-lg flex items-center justify-center\">\n                <Lightbulb className=\"text-orange-600 h-4 w-4\" />\n              </div>\n              <div>\n                <CardTitle>Content Opportunities</CardTitle>\n                <CardDescription>AI-detected gaps with auto-draft suggestions</CardDescription>\n              </div>\n            </div>\n            <Button className=\"bg-gradient-to-r from-primary to-secondary\" data-testid=\"button-create-all-drafts\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create All Drafts\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {contentGaps && contentGaps.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {contentGaps.slice(0, 6).map((gap, index) => (\n                <Card key={index} className=\"border-l-4 border-l-orange-500\" data-testid={`content-gap-${index}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <Badge \n                        variant={gap.gap_data?.priority === 'high' ? 'destructive' : 'secondary'}\n                        className=\"text-xs\"\n                      >\n                        {gap.gap_data?.priority || 'Medium'} Priority\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\">\n                        Asked {gap.frequency || 1} times\n                      </span>\n                    </div>\n                    <h4 className=\"font-medium text-foreground mb-2\">{gap.query}</h4>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      {gap.gap_data?.reason || 'Content gap detected for this query'}\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-muted-foreground\">\n                        Suggested: {gap.gap_data?.suggested_content_type || 'Article'}\n                      </span>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"text-xs\"\n                        data-testid={`button-create-draft-${index}`}\n                      >\n                        <Plus className=\"h-3 w-3 mr-1\" />\n                        Create Draft\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-muted-foreground text-center py-8\">No content gaps detected</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9901},"client/src/components/ChatWidget.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport {\n  MessageCircle, X, Maximize2, Minimize2, Bot,\n  TrendingUp, Settings, Mic, MicOff, Volume2, VolumeX\n} from \"lucide-react\";\nimport { useChat } from \"@/hooks/useChat\";\nimport { MessageList } from \"./MessageList\";\nimport { InputBar } from \"./InputBar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function ChatWidget() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showAnalytics, setShowAnalytics] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isTTSEnabled, setIsTTSEnabled] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const {\n    messages,\n    sendMessage,\n    isLoading,\n    isTyping,\n    sessionId,\n    clearHistory,\n    exportHistory,\n    analytics\n  } = useChat();\n\n  // Scroll to bottom on new messages\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Listen for custom events to open chat with message\n  useEffect(() => {\n    const handleContentIQMessage = (event: CustomEvent) => {\n      const { message } = event.detail;\n      setIsOpen(true);\n      if (message) {\n        sendMessage(message);\n      }\n    };\n\n    window.addEventListener('contentiq:message', handleContentIQMessage as EventListener);\n    return () => {\n      window.removeEventListener('contentiq:message', handleContentIQMessage as EventListener);\n    };\n  }, [sendMessage]);\n\n  // Text-to-Speech for assistant responses\n  useEffect(() => {\n    if (!isTTSEnabled) return;\n\n    const lastMessage = messages[messages.length - 1];\n    if (lastMessage && lastMessage.role === 'assistant' && !lastMessage.isStreaming) {\n      const utterance = new SpeechSynthesisUtterance(lastMessage.content);\n      utterance.rate = 0.9;\n      utterance.pitch = 1;\n      speechSynthesis.speak(utterance);\n    }\n  }, [messages, isTTSEnabled]);\n\n  // Voice recording\n  const startRecording = () => {\n    if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {\n      alert('Speech recognition not supported in this browser');\n      return;\n    }\n\n    const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;\n    const recognition = new SpeechRecognition();\n    \n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n\n    recognition.onstart = () => {\n      setIsRecording(true);\n    };\n\n    recognition.onresult = (event: any) => {\n      const transcript = event.results[0][0].transcript;\n      sendMessage(transcript);\n      setIsRecording(false);\n    };\n\n    recognition.onerror = () => {\n      setIsRecording(false);\n    };\n\n    recognition.onend = () => {\n      setIsRecording(false);\n    };\n\n    recognition.start();\n  };\n\n  return (\n    <>\n      {/* Floating Button */}\n      <AnimatePresence>\n        {!isOpen && (\n          <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            exit={{ scale: 0 }}\n            className=\"fixed bottom-6 right-6 z-50\"\n          >\n            <Button\n              onClick={() => setIsOpen(true)}\n              className=\"w-14 h-14 rounded-full bg-gradient-to-r from-primary to-secondary shadow-lg hover:shadow-xl transition-all relative\"\n              data-testid=\"button-chat-open\"\n            >\n              <MessageCircle className=\"h-6 w-6\" />\n              {messages.length > 0 && (\n                <Badge className=\"absolute -top-2 -right-2 px-2 py-1 text-xs\">\n                  {messages.length}\n                </Badge>\n              )}\n            </Button>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Chat Window */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: 100, scale: 0.8 }}\n            animate={{ opacity: 1, y: 0, scale: 1 }}\n            exit={{ opacity: 0, y: 100, scale: 0.8 }}\n            transition={{ type: \"spring\", damping: 25 }}\n            className={`fixed ${\n              isFullscreen \n                ? 'inset-4' \n                : 'bottom-6 right-6 w-96 h-[600px]'\n            } bg-background rounded-2xl border shadow-2xl flex flex-col overflow-hidden z-50`}\n            data-testid=\"chat-widget\"\n          >\n            {/* Header */}\n            <div className=\"bg-gradient-to-r from-primary to-secondary text-primary-foreground p-4 flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"relative\">\n                  <Bot className=\"h-6 w-6\" />\n                  <span className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse\" />\n                </div>\n                <div>\n                  <h3 className=\"font-bold text-lg\">ContentIQ Assistant</h3>\n                  <p className=\"text-xs opacity-90\">Powered by Contentstack MCP</p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setIsTTSEnabled(!isTTSEnabled)}\n                  className=\"text-primary-foreground hover:bg-white/20\"\n                  data-testid=\"button-tts-toggle\"\n                >\n                  {isTTSEnabled ? <Volume2 className=\"h-4 w-4\" /> : <VolumeX className=\"h-4 w-4\" />}\n                </Button>\n                {analytics && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => setShowAnalytics(!showAnalytics)}\n                    className=\"text-primary-foreground hover:bg-white/20\"\n                    data-testid=\"button-analytics-toggle\"\n                  >\n                    <TrendingUp className=\"h-4 w-4\" />\n                  </Button>\n                )}\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setIsFullscreen(!isFullscreen)}\n                  className=\"text-primary-foreground hover:bg-white/20\"\n                  data-testid=\"button-fullscreen-toggle\"\n                >\n                  {isFullscreen ? <Minimize2 className=\"h-4 w-4\" /> : <Maximize2 className=\"h-4 w-4\" />}\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"text-primary-foreground hover:bg-white/20\"\n                  data-testid=\"button-chat-close\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Analytics Panel */}\n            {showAnalytics && analytics && (\n              <motion.div\n                initial={{ height: 0 }}\n                animate={{ height: \"auto\" }}\n                className=\"bg-muted p-4 border-b\"\n              >\n                <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                  <div className=\"text-center\" data-testid=\"stat-total-queries\">\n                    <p className=\"text-muted-foreground\">Total Queries</p>\n                    <p className=\"font-bold text-lg\">{analytics.total_queries}</p>\n                  </div>\n                  <div className=\"text-center\" data-testid=\"stat-avg-response\">\n                    <p className=\"text-muted-foreground\">Avg Response</p>\n                    <p className=\"font-bold text-lg\">{Math.round(analytics.average_response_time_ms)}ms</p>\n                  </div>\n                  <div className=\"text-center\" data-testid=\"stat-success-rate\">\n                    <p className=\"text-muted-foreground\">Success Rate</p>\n                    <p className=\"font-bold text-lg\">{Math.round(analytics.success_rate)}%</p>\n                  </div>\n                </div>\n                {analytics.content_gaps_count > 0 && (\n                  <div className=\"mt-3 p-2 bg-yellow-100 dark:bg-yellow-900 rounded-lg\">\n                    <p className=\"text-xs text-yellow-800 dark:text-yellow-200 flex items-center gap-1\">\n                      <TrendingUp className=\"h-3 w-3\" />\n                      {analytics.content_gaps_count} content gaps detected\n                    </p>\n                  </div>\n                )}\n              </motion.div>\n            )}\n\n            {/* Messages Area */}\n            <MessageList\n              messages={messages}\n              isTyping={isTyping}\n              messagesEndRef={messagesEndRef}\n            />\n\n            {/* Input Area */}\n            <InputBar\n              onSendMessage={sendMessage}\n              isLoading={isLoading}\n              isRecording={isRecording}\n              onStartRecording={startRecording}\n              onExportHistory={exportHistory}\n              onClearHistory={clearHistory}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}\n","size_bytes":9143},"client/src/components/ContentCard.tsx":{"content":"import { ExternalLink, Calendar, MapPin, DollarSign } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface ContentCardProps {\n  content: {\n    title?: string;\n    description?: string;\n    image?: string;\n    price?: string;\n    location?: string;\n    category?: string;\n    date?: string;\n    url?: string;\n  };\n}\n\nexport function ContentCard({ content }: ContentCardProps) {\n  const {\n    title = \"Untitled Content\",\n    description = \"No description available\",\n    image,\n    price,\n    location,\n    category,\n    date,\n    url\n  } = content;\n\n  return (\n    <Card className=\"overflow-hidden border shadow-sm hover:shadow-md transition-shadow\" data-testid={`content-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      {image && (\n        <img \n          src={image} \n          alt={title}\n          className=\"w-full h-24 object-cover\"\n          loading=\"lazy\"\n        />\n      )}\n      <CardContent className=\"p-3\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-start justify-between\">\n            <h5 className=\"font-medium text-foreground text-sm line-clamp-2\">{title}</h5>\n            {category && (\n              <Badge variant=\"secondary\" className=\"ml-2 text-xs\">{category}</Badge>\n            )}\n          </div>\n          \n          <p className=\"text-xs text-muted-foreground line-clamp-2\">{description}</p>\n          \n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n            <div className=\"flex items-center space-x-3\">\n              {location && (\n                <span className=\"flex items-center\" data-testid=\"content-location\">\n                  <MapPin className=\"h-3 w-3 mr-1\" />\n                  {location}\n                </span>\n              )}\n              {date && (\n                <span className=\"flex items-center\" data-testid=\"content-date\">\n                  <Calendar className=\"h-3 w-3 mr-1\" />\n                  {date}\n                </span>\n              )}\n            </div>\n            \n            {price && (\n              <span className=\"flex items-center font-medium text-primary\" data-testid=\"content-price\">\n                <DollarSign className=\"h-3 w-3 mr-1\" />\n                {price}\n              </span>\n            )}\n          </div>\n          \n          {url && (\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"w-full text-xs\"\n              onClick={() => window.open(url, '_blank')}\n              data-testid=\"button-view-details\"\n            >\n              View Details <ExternalLink className=\"ml-1 h-3 w-3\" />\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2837},"client/src/components/InputBar.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Send, Mic, MicOff, Paperclip, Download, Trash2 } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface InputBarProps {\n  onSendMessage: (message: string) => void;\n  isLoading: boolean;\n  isRecording: boolean;\n  onStartRecording: () => void;\n  onExportHistory: () => void;\n  onClearHistory: () => void;\n}\n\nexport function InputBar({\n  onSendMessage,\n  isLoading,\n  isRecording,\n  onStartRecording,\n  onExportHistory,\n  onClearHistory\n}: InputBarProps) {\n  const [input, setInput] = useState(\"\");\n  const [showActions, setShowActions] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (input.trim() && !isLoading) {\n      onSendMessage(input.trim());\n      setInput(\"\");\n    }\n  };\n\n  const quickActions = [\n    { icon: Download, label: \"Export Chat\", action: onExportHistory },\n    { icon: Trash2, label: \"Clear History\", action: onClearHistory }\n  ];\n\n  return (\n    <div className=\"border-t bg-card p-4\" data-testid=\"input-bar\">\n      {/* Quick Actions */}\n      {showActions && (\n        <motion.div\n          initial={{ height: 0, opacity: 0 }}\n          animate={{ height: \"auto\", opacity: 1 }}\n          className=\"flex gap-2 mb-3 pb-3 border-b\"\n        >\n          {quickActions.map((action, idx) => (\n            <Button\n              key={idx}\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={action.action}\n              className=\"text-xs\"\n              data-testid={`button-${action.label.toLowerCase().replace(' ', '-')}`}\n            >\n              <action.icon className=\"h-3 w-3 mr-1\" />\n              {action.label}\n            </Button>\n          ))}\n        </motion.div>\n      )}\n\n      {/* Input Form */}\n      <form onSubmit={handleSubmit} className=\"flex gap-2\">\n        <div className=\"flex-1 relative\">\n          <Input\n            ref={inputRef}\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Ask about your content...\"\n            disabled={isLoading}\n            className=\"pr-10\"\n            data-testid=\"input-message\"\n          />\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setShowActions(!showActions)}\n            className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8\"\n            data-testid=\"button-actions\"\n          >\n            <Paperclip className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* Voice Button */}\n        <Button\n          type=\"button\"\n          variant={isRecording ? \"destructive\" : \"outline\"}\n          size=\"icon\"\n          onClick={onStartRecording}\n          disabled={isLoading}\n          className={isRecording ? \"animate-pulse\" : \"\"}\n          data-testid=\"button-voice\"\n        >\n          {isRecording ? <MicOff className=\"h-4 w-4\" /> : <Mic className=\"h-4 w-4\" />}\n        </Button>\n\n        {/* Send Button */}\n        <Button\n          type=\"submit\"\n          disabled={isLoading || !input.trim()}\n          className=\"bg-gradient-to-r from-primary to-secondary\"\n          data-testid=\"button-send\"\n        >\n          <Send className=\"h-4 w-4\" />\n        </Button>\n      </form>\n    </div>\n  );\n}\n","size_bytes":3456},"client/src/components/MessageList.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { Bot, User, Clock, Sparkles } from \"lucide-react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { ContentCard } from \"./ContentCard\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface Message {\n  id: number;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: string;\n  isStreaming?: boolean;\n  responseTime?: number;\n  contentReferences?: any[];\n}\n\ninterface MessageListProps {\n  messages: Message[];\n  isTyping: boolean;\n  messagesEndRef: React.RefObject<HTMLDivElement>;\n}\n\nexport function MessageList({ messages, isTyping, messagesEndRef }: MessageListProps) {\n  const handleSuggestionClick = (text: string) => {\n    window.dispatchEvent(new CustomEvent('contentiq:message', {\n      detail: { message: text }\n    }));\n  };\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-gradient-to-b from-muted/30 to-background\" data-testid=\"message-list\">\n      {messages.length === 0 && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center py-12\"\n        >\n          <Bot className=\"mx-auto text-muted-foreground mb-4 h-12 w-12\" />\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n            Welcome to ContentIQ!\n          </h3>\n          <p className=\"text-muted-foreground text-sm max-w-xs mx-auto mb-6\">\n            Ask me anything about your content. I can help you find information, identify gaps,\n            and suggest improvements.\n          </p>\n          <div className=\"space-y-2\">\n            <SuggestionChip \n              text=\"Show me available tours\" \n              onClick={() => handleSuggestionClick(\"Show me available tours\")}\n            />\n            <SuggestionChip \n              text=\"What content is missing?\" \n              onClick={() => handleSuggestionClick(\"What content is missing?\")}\n            />\n            <SuggestionChip \n              text=\"Analytics dashboard\" \n              onClick={() => handleSuggestionClick(\"Show me the analytics dashboard\")}\n            />\n          </div>\n        </motion.div>\n      )}\n\n      <AnimatePresence>\n        {messages.map((message, index) => (\n          <motion.div\n            key={message.id}\n            initial={{ opacity: 0, x: message.role === 'user' ? 20 : -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: index * 0.05 }}\n            className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n            data-testid={`message-${message.role}-${message.id}`}\n          >\n            <div className={`flex gap-3 max-w-[80%] ${message.role === 'user' ? 'flex-row-reverse' : ''}`}>\n              <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${\n                message.role === 'user' \n                  ? 'bg-primary text-primary-foreground' \n                  : 'bg-gradient-to-r from-secondary to-primary text-primary-foreground'\n              }`}>\n                {message.role === 'user' ? <User className=\"h-4 w-4\" /> : <Bot className=\"h-4 w-4\" />}\n              </div>\n              <div className={`flex flex-col gap-1 ${message.role === 'user' ? 'items-end' : 'items-start'}`}>\n                <div className={`px-4 py-2 rounded-2xl ${\n                  message.role === 'user'\n                    ? 'bg-primary text-primary-foreground'\n                    : 'bg-card border shadow-sm text-foreground'\n                }`}>\n                  {message.isStreaming && (\n                    <Sparkles className=\"inline-block mr-1 h-3 w-3 animate-pulse\" />\n                  )}\n                  <ReactMarkdown \n                    components={{\n                      p: ({ children }) => <p className=\"prose prose-sm max-w-none dark:prose-invert\">{children}</p>,\n                      div: ({ children }) => <div className=\"prose prose-sm max-w-none dark:prose-invert\">{children}</div>\n                    }}\n                  >\n                    {message.content}\n                  </ReactMarkdown>\n                </div>\n                {message.responseTime && (\n                  <span className=\"text-xs text-muted-foreground flex items-center gap-1 px-2\">\n                    <Clock className=\"h-3 w-3\" />\n                    {message.responseTime}ms\n                  </span>\n                )}\n                {message.contentReferences && message.contentReferences.length > 0 && (\n                  <div className=\"mt-2 space-y-2\">\n                    {message.contentReferences.map((ref, idx) => (\n                      <ContentCard key={idx} content={ref} />\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        ))}\n      </AnimatePresence>\n\n      {isTyping && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"flex items-center gap-2 text-muted-foreground\"\n          data-testid=\"typing-indicator\"\n        >\n          <Bot className=\"h-5 w-5\" />\n          <div className=\"flex gap-1\">\n            <span className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0ms' }} />\n            <span className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '150ms' }} />\n            <span className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '300ms' }} />\n          </div>\n        </motion.div>\n      )}\n      <div ref={messagesEndRef} />\n    </div>\n  );\n}\n\ninterface SuggestionChipProps {\n  text: string;\n  onClick: () => void;\n}\n\nfunction SuggestionChip({ text, onClick }: SuggestionChipProps) {\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      onClick={onClick}\n      className=\"text-xs\"\n      data-testid={`suggestion-${text.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      {text}\n    </Button>\n  );\n}\n","size_bytes":5990},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | null>(null);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    // Check localStorage for saved theme\n    const savedTheme = localStorage.getItem(\"contentiq-theme\") as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n      setTheme(prefersDark ? \"dark\" : \"light\");\n    }\n  }, []);\n\n  useEffect(() => {\n    // Update document class and localStorage\n    document.documentElement.classList.remove(\"light\", \"dark\");\n    document.documentElement.classList.add(theme);\n    localStorage.setItem(\"contentiq-theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1406},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAnalytics.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\n\nconst API_URL = import.meta.env.VITE_API_URL || window.location.origin;\n\ninterface Analytics {\n  total_queries: number;\n  average_response_time_ms: number;\n  success_rate: number;\n  content_gaps_count: number;\n  last_updated: string;\n}\n\ninterface QueryTrend {\n  date: string;\n  queries: number;\n}\n\ninterface TopQuery {\n  query: string;\n  count: number;\n  category: string;\n}\n\ninterface ContentGap {\n  query: string;\n  frequency: number;\n  gap_data: {\n    priority: 'high' | 'medium' | 'low';\n    suggested_content_type: string;\n    suggested_title: string;\n    reason: string;\n  };\n  timestamp: string;\n}\n\nexport const useAnalytics = () => {\n  const [wsConnected, setWsConnected] = useState(false);\n  \n  // Real-time analytics via query\n  const { data: analytics, refetch: refetchAnalytics } = useQuery<Analytics>({\n    queryKey: ['/api/analytics'],\n    refetchInterval: 5000,\n  });\n\n  // Query trends\n  const { data: queryTrends } = useQuery<QueryTrend[]>({\n    queryKey: ['/api/analytics/trends'],\n    refetchInterval: 30000,\n  });\n\n  // Top queries\n  const { data: topQueries } = useQuery<TopQuery[]>({\n    queryKey: ['/api/analytics/top-queries'],\n    refetchInterval: 30000,\n  });\n\n  // Content gaps\n  const { data: contentGaps } = useQuery<ContentGap[]>({\n    queryKey: ['/api/content-gaps'],\n    refetchInterval: 10000,\n  });\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    try {\n      const socket = new WebSocket(wsUrl);\n\n      socket.onopen = () => {\n        console.log('Analytics WebSocket connected');\n        setWsConnected(true);\n      };\n\n      socket.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.type === 'analytics_update') {\n            // Trigger a refetch of analytics data\n            refetchAnalytics();\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      socket.onclose = () => {\n        console.log('Analytics WebSocket disconnected');\n        setWsConnected(false);\n      };\n\n      socket.onerror = (error) => {\n        console.error('Analytics WebSocket error:', error);\n        setWsConnected(false);\n      };\n\n      return () => {\n        socket.close();\n      };\n    } catch (error) {\n      console.error('Failed to establish WebSocket connection:', error);\n    }\n  }, [refetchAnalytics]);\n\n  return {\n    analytics,\n    queryTrends,\n    topQueries,\n    contentGaps,\n    wsConnected,\n    refetch: {\n      analytics: refetchAnalytics\n    }\n  };\n};\n","size_bytes":2781},"client/src/hooks/useChat.ts":{"content":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\nconst API_URL = import.meta.env.VITE_API_URL || window.location.origin;\n\ninterface Message {\n  id: number;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: string;\n  isStreaming?: boolean;\n  responseTime?: number;\n  contentReferences?: any[];\n}\n\ninterface Analytics {\n  total_queries: number;\n  average_response_time_ms: number;\n  success_rate: number;\n  content_gaps_count: number;\n}\n\nexport const useChat = () => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [sessionId] = useState(() =>\n    `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  );\n  const [analytics, setAnalytics] = useState<Analytics | null>(null);\n  const eventSourceRef = useRef<EventSource | null>(null);\n  const { toast } = useToast();\n\n  // Load chat history from localStorage\n  useEffect(() => {\n    const savedMessages = localStorage.getItem(`chat_${sessionId}`);\n    if (savedMessages) {\n      try {\n        setMessages(JSON.parse(savedMessages));\n      } catch (error) {\n        console.error('Error loading chat history:', error);\n      }\n    }\n  }, [sessionId]);\n\n  // Save messages to localStorage\n  useEffect(() => {\n    if (messages.length > 0) {\n      localStorage.setItem(`chat_${sessionId}`, JSON.stringify(messages));\n    }\n  }, [messages, sessionId]);\n\n  const sendMessage = useCallback(async (content: string) => {\n    // Add user message immediately\n    const userMessage: Message = {\n      id: Date.now(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setIsTyping(true);\n\n    // Create assistant message placeholder\n    const assistantMessageId = Date.now() + 1;\n    const assistantMessage: Message = {\n      id: assistantMessageId,\n      role: 'assistant',\n      content: '',\n      timestamp: new Date().toISOString(),\n      isStreaming: true\n    };\n    setMessages(prev => [...prev, assistantMessage]);\n\n    try {\n      // Use EventSource for streaming\n      const eventSource = new EventSource(\n        `${API_URL}/api/chat?` + new URLSearchParams({\n          message: content,\n          session_id: sessionId,\n          stream: 'true'\n        })\n      );\n      eventSourceRef.current = eventSource;\n\n      let fullResponse = '';\n      eventSource.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n\n          if (data.chunk) {\n            fullResponse += data.chunk;\n            setMessages(prev => prev.map(msg =>\n              msg.id === assistantMessageId\n                ? { ...msg, content: fullResponse }\n                : msg\n            ));\n          }\n\n          if (data.done) {\n            setMessages(prev => prev.map(msg =>\n              msg.id === assistantMessageId\n                ? { \n                    ...msg, \n                    isStreaming: false, \n                    responseTime: data.response_time_ms,\n                    contentReferences: data.content_references\n                  }\n                : msg\n            ));\n            setIsTyping(false);\n            eventSource.close();\n          }\n\n          if (data.notification) {\n            toast({\n              title: \"Content Gap Detected\",\n              description: data.notification,\n              variant: \"default\"\n            });\n          }\n\n          if (data.error) {\n            throw new Error(data.error);\n          }\n        } catch (parseError) {\n          console.error('Error parsing event data:', parseError);\n        }\n      };\n\n      eventSource.onerror = (error) => {\n        console.error('EventSource error:', error);\n        eventSource.close();\n        setIsTyping(false);\n        setIsLoading(false);\n        \n        setMessages(prev => prev.map(msg =>\n          msg.id === assistantMessageId\n            ? { \n                ...msg, \n                content: 'Sorry, I encountered an error. Please try again.', \n                isStreaming: false \n              }\n            : msg\n        ));\n\n        toast({\n          title: \"Connection Error\",\n          description: \"Failed to connect to the chat service. Please try again.\",\n          variant: \"destructive\"\n        });\n      };\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setMessages(prev => prev.map(msg =>\n        msg.id === assistantMessageId\n          ? { \n              ...msg, \n              content: 'Sorry, I encountered an error. Please try again.', \n              isStreaming: false \n            }\n          : msg\n      ));\n      \n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sessionId, toast]);\n\n  const clearHistory = useCallback(() => {\n    setMessages([]);\n    localStorage.removeItem(`chat_${sessionId}`);\n    toast({\n      title: \"History Cleared\",\n      description: \"Chat history has been cleared successfully.\",\n    });\n  }, [sessionId, toast]);\n\n  const exportHistory = useCallback(() => {\n    try {\n      const chatData = {\n        sessionId,\n        exportDate: new Date().toISOString(),\n        messages\n      };\n      const blob = new Blob([JSON.stringify(chatData, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `chat_history_${sessionId}.json`;\n      a.click();\n      URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Export Complete\",\n        description: \"Chat history has been exported successfully.\",\n      });\n    } catch (error) {\n      console.error('Error exporting history:', error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export chat history. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  }, [messages, sessionId, toast]);\n\n  // Fetch analytics\n  useEffect(() => {\n    const fetchAnalytics = async () => {\n      try {\n        const response = await fetch(`${API_URL}/api/analytics`);\n        if (response.ok) {\n          const data = await response.json();\n          setAnalytics(data);\n        }\n      } catch (error) {\n        console.error('Error fetching analytics:', error);\n      }\n    };\n\n    fetchAnalytics();\n    const interval = setInterval(fetchAnalytics, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return {\n    messages,\n    sendMessage,\n    isLoading,\n    isTyping,\n    sessionId,\n    clearHistory,\n    exportHistory,\n    analytics\n  };\n};\n","size_bytes":6781},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { AnalyticsDashboard } from \"@/components/AnalyticsDashboard\";\nimport { ChatWidget } from \"@/components/ChatWidget\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Brain, Moon, Sun, Settings, ExternalLink } from \"lucide-react\";\nimport { useTheme } from \"@/components/ThemeProvider\";\n\nexport default function Dashboard() {\n  const { theme, toggleTheme } = useTheme();\n  const [showSettings, setShowSettings] = useState(false);\n\n  const handleDemoQuery = (query: string) => {\n    // Dispatch custom event to open chat widget with query\n    window.dispatchEvent(new CustomEvent('contentiq:message', {\n      detail: { message: query }\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-muted to-background\">\n      {/* Header Navigation */}\n      <header className=\"bg-card border-b border-border shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-secondary rounded-xl flex items-center justify-center\">\n                  <Brain className=\"text-primary-foreground text-lg\" />\n                </div>\n                <div>\n                  <h1 className=\"text-xl font-bold text-foreground\">ContentIQ</h1>\n                  <p className=\"text-xs text-muted-foreground\">Powered by Contentstack MCP</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={toggleTheme}\n                data-testid=\"button-theme-toggle\"\n              >\n                {theme === \"dark\" ? <Sun className=\"h-4 w-4\" /> : <Moon className=\"h-4 w-4\" />}\n              </Button>\n              \n              <div className=\"flex items-center space-x-3\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face\" \n                  alt=\"User Avatar\" \n                  className=\"w-10 h-10 rounded-full border-2 border-border\"\n                />\n                <div className=\"hidden md:block\">\n                  <p className=\"text-sm font-medium\">Admin User</p>\n                  <p className=\"text-xs text-muted-foreground\">admin@company.com</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Analytics Dashboard */}\n        <AnalyticsDashboard />\n\n        {/* Live Chat Demo Section */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Live Chat Demo</CardTitle>\n            <CardDescription>\n              Try the ContentIQ chat assistant with different queries\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {/* Demo Content Cards */}\n              <Card className=\"cursor-pointer hover:shadow-md transition-shadow\" data-testid=\"card-demo-italian-tours\">\n                <CardContent className=\"pt-6\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1523906834658-6e24ef2386f9?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\" \n                    alt=\"Italian countryside\" \n                    className=\"w-full h-32 object-cover rounded-lg mb-4\"\n                  />\n                  <h3 className=\"font-bold text-lg mb-2\">Italian Tours</h3>\n                  <p className=\"text-muted-foreground mb-4\">Explore beautiful Italy</p>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => handleDemoQuery('Tell me about Italian tours')}\n                    data-testid=\"button-ask-italian-tours\"\n                  >\n                    Ask AI <ExternalLink className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className=\"cursor-pointer hover:shadow-md transition-shadow\" data-testid=\"card-demo-tokyo-tours\">\n                <CardContent className=\"pt-6\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\" \n                    alt=\"Tokyo skyline\" \n                    className=\"w-full h-32 object-cover rounded-lg mb-4\"\n                  />\n                  <h3 className=\"font-bold text-lg mb-2\">Tokyo Adventures</h3>\n                  <p className=\"text-muted-foreground mb-4\">Discover modern Japan</p>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => handleDemoQuery('Show me Tokyo tour packages')}\n                    data-testid=\"button-ask-tokyo-tours\"\n                  >\n                    Ask AI <ExternalLink className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className=\"cursor-pointer hover:shadow-md transition-shadow\" data-testid=\"card-demo-safari-tours\">\n                <CardContent className=\"pt-6\">\n                  <img \n                    src=\"https://images.unsplash.com/photo-1516026672322-bc52d61a55d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\" \n                    alt=\"African safari\" \n                    className=\"w-full h-32 object-cover rounded-lg mb-4\"\n                  />\n                  <h3 className=\"font-bold text-lg mb-2\">Safari Experience</h3>\n                  <p className=\"text-muted-foreground mb-4\">African wildlife adventure</p>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => handleDemoQuery('What safari tours are available?')}\n                    data-testid=\"button-ask-safari-tours\"\n                  >\n                    Ask AI <ExternalLink className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* SDK Integration Code */}\n            <div className=\"mt-8 bg-muted rounded-lg p-4\">\n              <p className=\"text-sm font-medium text-foreground mb-2\">Embed Code</p>\n              <div className=\"bg-background rounded border p-3 text-xs font-mono text-muted-foreground\">\n                <div>&lt;script src=\"https://cdn.contentiq.io/widget.js\"&gt;&lt;/script&gt;</div>\n                <div>&lt;script&gt;</div>\n                <div>&nbsp;&nbsp;ContentIQ.init({`{`}</div>\n                <div>&nbsp;&nbsp;&nbsp;&nbsp;apiKey: 'your-api-key',</div>\n                <div>&nbsp;&nbsp;&nbsp;&nbsp;theme: 'auto'</div>\n                <div>&nbsp;&nbsp;{`}`});</div>\n                <div>&lt;/script&gt;</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n\n      {/* Chat Widget */}\n      <ChatWidget />\n\n      {/* Floating Settings Button */}\n      <Button\n        variant=\"outline\"\n        size=\"icon\"\n        className=\"fixed bottom-6 left-6 rounded-full shadow-lg\"\n        onClick={() => setShowSettings(!showSettings)}\n        data-testid=\"button-settings\"\n      >\n        <Settings className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n}\n","size_bytes":7693},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/sdk/ContentIQSDK.js":{"content":"/**\n * ContentIQ SDK - Embeddable Chat Widget\n * Provides easy integration for any website\n */\n\nclass ContentIQSDK {\n  constructor() {\n    this.config = {\n      apiUrl: 'http://localhost:8000',\n      theme: 'auto',\n      position: 'bottom-right',\n      primaryColor: '#3B82F6',\n      secondaryColor: '#8B5CF6',\n      accentColor: '#A855F7'\n    };\n    this.isInitialized = false;\n    this.widget = null;\n    this.sessionId = `sdk_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Initialize the ContentIQ widget\n   * @param {Object} options - Configuration options\n   */\n  init(options = {}) {\n    if (this.isInitialized) {\n      console.warn('ContentIQ SDK already initialized');\n      return;\n    }\n\n    // Merge configuration\n    this.config = { ...this.config, ...options };\n    \n    // Wait for DOM to be ready\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => this._createWidget());\n    } else {\n      this._createWidget();\n    }\n\n    this.isInitialized = true;\n  }\n\n  /**\n   * Create and inject the chat widget\n   * @private\n   */\n  _createWidget() {\n    // Create widget container\n    this.widget = document.createElement('div');\n    this.widget.id = 'contentiq-widget';\n    this.widget.className = 'contentiq-widget';\n    \n    // Inject styles\n    this._injectStyles();\n    \n    // Create widget HTML\n    this.widget.innerHTML = this._getWidgetHTML();\n    \n    // Append to body\n    document.body.appendChild(this.widget);\n    \n    // Bind events\n    this._bindEvents();\n    \n    // Apply theme\n    this._applyTheme();\n  }\n\n  /**\n   * Inject required CSS styles\n   * @private\n   */\n  _injectStyles() {\n    if (document.getElementById('contentiq-styles')) return;\n\n    const style = document.createElement('style');\n    style.id = 'contentiq-styles';\n    style.textContent = `\n      .contentiq-widget {\n        position: fixed;\n        z-index: 10000;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      }\n      \n      .contentiq-widget.bottom-right {\n        bottom: 24px;\n        right: 24px;\n      }\n      \n      .contentiq-widget.bottom-left {\n        bottom: 24px;\n        left: 24px;\n      }\n      \n      .contentiq-fab {\n        width: 56px;\n        height: 56px;\n        border-radius: 50%;\n        border: none;\n        cursor: pointer;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        transition: all 0.3s ease;\n        background: linear-gradient(135deg, var(--ciq-primary), var(--ciq-secondary));\n        color: white;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 24px;\n      }\n      \n      .contentiq-fab:hover {\n        transform: scale(1.05);\n        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\n      }\n      \n      .contentiq-chat-window {\n        position: absolute;\n        bottom: 70px;\n        right: 0;\n        width: 380px;\n        height: 600px;\n        background: white;\n        border-radius: 16px;\n        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);\n        display: none;\n        flex-direction: column;\n        overflow: hidden;\n        transform-origin: bottom right;\n        animation: slideUpScale 0.3s ease-out;\n      }\n      \n      .contentiq-chat-window.open {\n        display: flex;\n      }\n      \n      @keyframes slideUpScale {\n        from {\n          opacity: 0;\n          transform: translateY(20px) scale(0.95);\n        }\n        to {\n          opacity: 1;\n          transform: translateY(0) scale(1);\n        }\n      }\n      \n      .contentiq-header {\n        background: linear-gradient(135deg, var(--ciq-primary), var(--ciq-secondary));\n        color: white;\n        padding: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      }\n      \n      .contentiq-header-content {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n      }\n      \n      .contentiq-avatar {\n        width: 32px;\n        height: 32px;\n        border-radius: 50%;\n        background: rgba(255, 255, 255, 0.2);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        position: relative;\n      }\n      \n      .contentiq-status {\n        position: absolute;\n        bottom: -2px;\n        right: -2px;\n        width: 12px;\n        height: 12px;\n        background: #10B981;\n        border: 2px solid white;\n        border-radius: 50%;\n      }\n      \n      .contentiq-header-text h3 {\n        margin: 0;\n        font-size: 16px;\n        font-weight: 600;\n      }\n      \n      .contentiq-header-text p {\n        margin: 0;\n        font-size: 12px;\n        opacity: 0.9;\n      }\n      \n      .contentiq-close {\n        background: none;\n        border: none;\n        color: white;\n        cursor: pointer;\n        padding: 8px;\n        border-radius: 8px;\n        transition: background-color 0.2s ease;\n      }\n      \n      .contentiq-close:hover {\n        background: rgba(255, 255, 255, 0.2);\n      }\n      \n      .contentiq-messages {\n        flex: 1;\n        overflow-y: auto;\n        padding: 16px;\n        background: linear-gradient(to bottom, #f8fafc, white);\n      }\n      \n      .contentiq-welcome {\n        text-align: center;\n        padding: 32px 16px;\n      }\n      \n      .contentiq-welcome-icon {\n        width: 48px;\n        height: 48px;\n        margin: 0 auto 16px;\n        border-radius: 50%;\n        background: linear-gradient(135deg, var(--ciq-primary), var(--ciq-secondary));\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        color: white;\n        font-size: 24px;\n      }\n      \n      .contentiq-welcome h4 {\n        margin: 0 0 8px;\n        font-size: 18px;\n        font-weight: 600;\n        color: #1f2937;\n      }\n      \n      .contentiq-welcome p {\n        margin: 0 0 16px;\n        color: #6b7280;\n        font-size: 14px;\n        line-height: 1.5;\n      }\n      \n      .contentiq-suggestions {\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n      }\n      \n      .contentiq-suggestion {\n        background: white;\n        border: 1px solid #e5e7eb;\n        border-radius: 8px;\n        padding: 8px 12px;\n        font-size: 12px;\n        color: #374151;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        text-align: center;\n      }\n      \n      .contentiq-suggestion:hover {\n        background: var(--ciq-primary);\n        color: white;\n        border-color: var(--ciq-primary);\n      }\n      \n      .contentiq-message {\n        display: flex;\n        gap: 12px;\n        margin-bottom: 16px;\n      }\n      \n      .contentiq-message.user {\n        flex-direction: row-reverse;\n      }\n      \n      .contentiq-message-avatar {\n        width: 32px;\n        height: 32px;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n        font-size: 14px;\n        color: white;\n      }\n      \n      .contentiq-message.user .contentiq-message-avatar {\n        background: var(--ciq-primary);\n      }\n      \n      .contentiq-message.assistant .contentiq-message-avatar {\n        background: linear-gradient(135deg, var(--ciq-secondary), var(--ciq-primary));\n      }\n      \n      .contentiq-message-content {\n        max-width: 70%;\n      }\n      \n      .contentiq-message.user .contentiq-message-content {\n        text-align: right;\n      }\n      \n      .contentiq-message-bubble {\n        padding: 12px 16px;\n        border-radius: 16px;\n        font-size: 14px;\n        line-height: 1.4;\n      }\n      \n      .contentiq-message.user .contentiq-message-bubble {\n        background: var(--ciq-primary);\n        color: white;\n      }\n      \n      .contentiq-message.assistant .contentiq-message-bubble {\n        background: white;\n        color: #1f2937;\n        border: 1px solid #e5e7eb;\n      }\n      \n      .contentiq-input-area {\n        padding: 16px;\n        border-top: 1px solid #e5e7eb;\n        background: white;\n      }\n      \n      .contentiq-input-form {\n        display: flex;\n        gap: 8px;\n        align-items: center;\n      }\n      \n      .contentiq-input {\n        flex: 1;\n        padding: 12px 16px;\n        border: 1px solid #e5e7eb;\n        border-radius: 24px;\n        font-size: 14px;\n        outline: none;\n        transition: border-color 0.2s ease;\n      }\n      \n      .contentiq-input:focus {\n        border-color: var(--ciq-primary);\n      }\n      \n      .contentiq-send {\n        width: 40px;\n        height: 40px;\n        border-radius: 50%;\n        border: none;\n        background: linear-gradient(135deg, var(--ciq-primary), var(--ciq-secondary));\n        color: white;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: transform 0.2s ease;\n      }\n      \n      .contentiq-send:hover {\n        transform: scale(1.05);\n      }\n      \n      .contentiq-send:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n        transform: none;\n      }\n      \n      .contentiq-typing {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        color: #6b7280;\n        font-size: 14px;\n      }\n      \n      .contentiq-typing-dots {\n        display: flex;\n        gap: 4px;\n      }\n      \n      .contentiq-typing-dot {\n        width: 6px;\n        height: 6px;\n        border-radius: 50%;\n        background: #9ca3af;\n        animation: typing 1.4s infinite ease-in-out;\n      }\n      \n      .contentiq-typing-dot:nth-child(1) { animation-delay: -0.32s; }\n      .contentiq-typing-dot:nth-child(2) { animation-delay: -0.16s; }\n      \n      @keyframes typing {\n        0%, 80%, 100% {\n          transform: scale(0.8);\n          opacity: 0.5;\n        }\n        40% {\n          transform: scale(1);\n          opacity: 1;\n        }\n      }\n      \n      /* Dark theme */\n      .contentiq-widget[data-theme=\"dark\"] .contentiq-chat-window {\n        background: #1f2937;\n        color: white;\n      }\n      \n      .contentiq-widget[data-theme=\"dark\"] .contentiq-messages {\n        background: linear-gradient(to bottom, #374151, #1f2937);\n      }\n      \n      .contentiq-widget[data-theme=\"dark\"] .contentiq-message.assistant .contentiq-message-bubble {\n        background: #374151;\n        color: white;\n        border-color: #4b5563;\n      }\n      \n      .contentiq-widget[data-theme=\"dark\"] .contentiq-input {\n        background: #374151;\n        border-color: #4b5563;\n        color: white;\n      }\n      \n      .contentiq-widget[data-theme=\"dark\"] .contentiq-input::placeholder {\n        color: #9ca3af;\n      }\n      \n      .contentiq-widget[data-theme=\"dark\"] .contentiq-input-area {\n        background: #1f2937;\n        border-color: #4b5563;\n      }\n      \n      /* CSS Variables */\n      :root {\n        --ciq-primary: #3B82F6;\n        --ciq-secondary: #8B5CF6;\n        --ciq-accent: #A855F7;\n      }\n    `;\n    \n    document.head.appendChild(style);\n  }\n\n  /**\n   * Get widget HTML structure\n   * @private\n   */\n  _getWidgetHTML() {\n    return `\n      <button class=\"contentiq-fab\" data-action=\"toggle\">\n        💬\n      </button>\n      \n      <div class=\"contentiq-chat-window\">\n        <div class=\"contentiq-header\">\n          <div class=\"contentiq-header-content\">\n            <div class=\"contentiq-avatar\">\n              🤖\n              <div class=\"contentiq-status\"></div>\n            </div>\n            <div class=\"contentiq-header-text\">\n              <h3>ContentIQ Assistant</h3>\n              <p>Powered by Contentstack MCP</p>\n            </div>\n          </div>\n          <button class=\"contentiq-close\" data-action=\"close\">×</button>\n        </div>\n        \n        <div class=\"contentiq-messages\">\n          <div class=\"contentiq-welcome\">\n            <div class=\"contentiq-welcome-icon\">🤖</div>\n            <h4>Welcome to ContentIQ!</h4>\n            <p>Ask me anything about your content. I can help you find information, identify gaps, and suggest improvements.</p>\n            <div class=\"contentiq-suggestions\">\n              <div class=\"contentiq-suggestion\" data-suggestion=\"Show me available tours\">Show me available tours</div>\n              <div class=\"contentiq-suggestion\" data-suggestion=\"What content is missing?\">What content is missing?</div>\n              <div class=\"contentiq-suggestion\" data-suggestion=\"Analytics dashboard\">Analytics dashboard</div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"contentiq-input-area\">\n          <form class=\"contentiq-input-form\">\n            <input type=\"text\" class=\"contentiq-input\" placeholder=\"Ask about your content...\" />\n            <button type=\"submit\" class=\"contentiq-send\">→</button>\n          </form>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Bind event listeners\n   * @private\n   */\n  _bindEvents() {\n    const fab = this.widget.querySelector('.contentiq-fab');\n    const chatWindow = this.widget.querySelector('.contentiq-chat-window');\n    const closeBtn = this.widget.querySelector('.contentiq-close');\n    const form = this.widget.querySelector('.contentiq-input-form');\n    const input = this.widget.querySelector('.contentiq-input');\n    const suggestions = this.widget.querySelectorAll('.contentiq-suggestion');\n\n    // Toggle chat window\n    fab.addEventListener('click', () => {\n      chatWindow.classList.toggle('open');\n    });\n\n    // Close chat window\n    closeBtn.addEventListener('click', () => {\n      chatWindow.classList.remove('open');\n    });\n\n    // Handle form submission\n    form.addEventListener('submit', (e) => {\n      e.preventDefault();\n      const message = input.value.trim();\n      if (message) {\n        this._sendMessage(message);\n        input.value = '';\n      }\n    });\n\n    // Handle suggestions\n    suggestions.forEach(suggestion => {\n      suggestion.addEventListener('click', () => {\n        const message = suggestion.dataset.suggestion;\n        this._sendMessage(message);\n      });\n    });\n\n    // Listen for external events\n    window.addEventListener('contentiq:open', () => {\n      chatWindow.classList.add('open');\n    });\n\n    window.addEventListener('contentiq:close', () => {\n      chatWindow.classList.remove('open');\n    });\n\n    window.addEventListener('contentiq:message', (event) => {\n      const { message } = event.detail;\n      if (message) {\n        chatWindow.classList.add('open');\n        this._sendMessage(message);\n      }\n    });\n  }\n\n  /**\n   * Apply theme based on configuration\n   * @private\n   */\n  _applyTheme() {\n    // Set position\n    this.widget.classList.add(this.config.position);\n\n    // Set CSS variables for colors\n    this.widget.style.setProperty('--ciq-primary', this.config.primaryColor);\n    this.widget.style.setProperty('--ciq-secondary', this.config.secondaryColor);\n    this.widget.style.setProperty('--ciq-accent', this.config.accentColor);\n\n    // Set theme\n    if (this.config.theme === 'auto') {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      this.widget.setAttribute('data-theme', prefersDark ? 'dark' : 'light');\n    } else {\n      this.widget.setAttribute('data-theme', this.config.theme);\n    }\n  }\n\n  /**\n   * Send a message to the chat\n   * @private\n   */\n  async _sendMessage(message) {\n    const messagesContainer = this.widget.querySelector('.contentiq-messages');\n    \n    // Clear welcome message if present\n    const welcome = messagesContainer.querySelector('.contentiq-welcome');\n    if (welcome) {\n      welcome.remove();\n    }\n\n    // Add user message\n    this._addMessage('user', message);\n\n    // Show typing indicator\n    this._showTyping();\n\n    try {\n      // Send to API\n      const response = await fetch(`${this.config.apiUrl}/api/chat?${new URLSearchParams({\n        message,\n        session_id: this.sessionId,\n        stream: 'false'\n      })}`);\n\n      if (!response.ok) {\n        throw new Error('Failed to get response');\n      }\n\n      const data = await response.json();\n      \n      // Hide typing indicator\n      this._hideTyping();\n\n      // Add assistant response\n      this._addMessage('assistant', data.response || 'Sorry, I couldn\\'t process your request.');\n\n    } catch (error) {\n      console.error('Error sending message:', error);\n      this._hideTyping();\n      this._addMessage('assistant', 'Sorry, I\\'m experiencing technical difficulties. Please try again.');\n    }\n  }\n\n  /**\n   * Add a message to the chat\n   * @private\n   */\n  _addMessage(role, content) {\n    const messagesContainer = this.widget.querySelector('.contentiq-messages');\n    \n    const messageElement = document.createElement('div');\n    messageElement.className = `contentiq-message ${role}`;\n    messageElement.innerHTML = `\n      <div class=\"contentiq-message-avatar\">${role === 'user' ? '👤' : '🤖'}</div>\n      <div class=\"contentiq-message-content\">\n        <div class=\"contentiq-message-bubble\">${content}</div>\n      </div>\n    `;\n\n    messagesContainer.appendChild(messageElement);\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n  }\n\n  /**\n   * Show typing indicator\n   * @private\n   */\n  _showTyping() {\n    const messagesContainer = this.widget.querySelector('.contentiq-messages');\n    \n    const typingElement = document.createElement('div');\n    typingElement.className = 'contentiq-typing';\n    typingElement.innerHTML = `\n      <div class=\"contentiq-message-avatar\">🤖</div>\n      <div class=\"contentiq-typing-dots\">\n        <div class=\"contentiq-typing-dot\"></div>\n        <div class=\"contentiq-typing-dot\"></div>\n        <div class=\"contentiq-typing-dot\"></div>\n      </div>\n    `;\n\n    messagesContainer.appendChild(typingElement);\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n  }\n\n  /**\n   * Hide typing indicator\n   * @private\n   */\n  _hideTyping() {\n    const typing = this.widget.querySelector('.contentiq-typing');\n    if (typing) {\n      typing.remove();\n    }\n  }\n\n  /**\n   * Public API methods\n   */\n  \n  open() {\n    if (!this.isInitialized) return;\n    const chatWindow = this.widget.querySelector('.contentiq-chat-window');\n    chatWindow.classList.add('open');\n  }\n\n  close() {\n    if (!this.isInitialized) return;\n    const chatWindow = this.widget.querySelector('.contentiq-chat-window');\n    chatWindow.classList.remove('open');\n  }\n\n  sendMessage(message) {\n    if (!this.isInitialized) return;\n    this._sendMessage(message);\n  }\n\n  setTheme(theme) {\n    if (!this.isInitialized) return;\n    this.config.theme = theme;\n    this._applyTheme();\n  }\n\n  destroy() {\n    if (!this.isInitialized) return;\n    \n    // Remove styles\n    const styles = document.getElementById('contentiq-styles');\n    if (styles) styles.remove();\n    \n    // Remove widget\n    if (this.widget) {\n      this.widget.remove();\n      this.widget = null;\n    }\n    \n    this.isInitialized = false;\n  }\n}\n\n// Create global instance\nwindow.ContentIQ = new ContentIQSDK();\n\n// Auto-initialize if config is present\nif (window.ContentIQConfig) {\n  window.ContentIQ.init(window.ContentIQConfig);\n}\n","size_bytes":19068},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}