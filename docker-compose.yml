version: '3.8'

services:
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ContentIQ Backend API
  contentiq-api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Server Configuration
      - NODE_ENV=production
      - PORT=8000
      - HOST=0.0.0.0
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      
      # Contentstack Configuration
      - CONTENTSTACK_API_KEY=${CONTENTSTACK_API_KEY}
      - CONTENTSTACK_DELIVERY_TOKEN=${CONTENTSTACK_DELIVERY_TOKEN}
      - CONTENTSTACK_MANAGEMENT_TOKEN=${CONTENTSTACK_MANAGEMENT_TOKEN}
      - CONTENTSTACK_ENVIRONMENT=${CONTENTSTACK_ENVIRONMENT:-development}
      - CONTENTSTACK_LAUNCH_PROJECT_ID=${CONTENTSTACK_LAUNCH_PROJECT_ID}
      
      # LLM Configuration
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Security
      - SESSION_SECRET=${SESSION_SECRET}
      
      # CORS Configuration
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application (optional, for full-stack deployment)
  contentiq-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://contentiq-api:8000
    depends_on:
      contentiq-api:
        condition: service_healthy

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - contentiq-api
      - contentiq-frontend
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  default:
    name: contentiq-network
